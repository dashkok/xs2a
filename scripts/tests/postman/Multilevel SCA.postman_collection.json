{
	"info": {
		"_postman_id": "79c6a670-df06-4a76-82dc-f7d77f72ce9b",
		"name": "Multilevel SCA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Payment Initiation",
			"item": [
				{
					"name": "1. Enable signing basket support in ASPSP profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61d627dc-6141-4ff7-b89d-a1d8f59395b6",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": true\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ]\n\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_aspsp_profile}}"
							],
							"path": [
								"api",
								"v1",
								"aspsp-profile",
								"for-debug",
								"aspsp-settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Set embedded SCA approach",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "edcb84c2-fd37-4cc3-b068-bc16af61ad79",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
						},
						"url": {
							"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_aspsp_profile}}"
							],
							"path": [
								"api",
								"v1",
								"aspsp-profile",
								"for-debug",
								"sca-approaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Payment initiation request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9222079-837d-4671-8459-35b782c1751a",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transcation status is RCVD\", () => {",
									"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
									"});",
									"",
									"pm.test(\"Links exist\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    ",
									"    pm.expect(_links).to.have.property('self');",
									"    pm.expect(_links).to.have.property('status');",
									"    pm.expect(_links).to.have.property('startAuthorisation');",
									"});",
									"",
									"pm.test(\"Payment ID exists\", () => {",
									"    pm.expect(jsonData).to.have.property('paymentId');",
									"});",
									"",
									"pm.globals.set(\"payment_id\", jsonData.paymentId);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9ec50287-78c9-448c-bb57-1ca3d66a3302",
								"exec": [
									"pm.globals.unset(\"payment_id\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_multilevel_1}}",
								"type": "text"
							},
							{
								"key": "PSU-IP-Address",
								"value": "{{ip_address}}",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}",
								"type": "text"
							},
							{
								"key": "TPP-Explicit-Authorisation-Preferred",
								"value": "true",
								"type": "text"
							},
							{
								"key": "TPP-Redirect-URI",
								"value": "TPP-Redirect-URI",
								"type": "text"
							},
							{
								"key": "TPP-Nok-Redirect-URI",
								"value": "TPP-Nok-Redirect-URI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multilevel}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multilevel}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"{{payment_service}}",
								"{{payment_product}}"
							]
						},
						"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
					},
					"response": []
				},
				{
					"name": "4. Start the authorisation process for a payment initiation first PSU",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bf9ea7cb-8182-4c16-9b07-01f044b65deb",
								"exec": [
									"pm.globals.unset(\"authorisation_id\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "14336c04-b429-4d6b-a75e-7034b1ca76cf",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
									"",
									"pm.globals.set(\"authorisation_id\", authorisationId);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Select scaStatus \", () => {",
									"    pm.expect(jsonData).to.have.property('scaStatus');",
									"    const scaStatus = jsonData.scaStatus;",
									"    pm.expect(scaStatus).to.eql('psuIdentified');",
									"});",
									"",
									"pm.test(\"Links exist\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    ",
									"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
									"    pm.expect(_links).to.have.property('scaStatus');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_multilevel_1}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"{{payment_service}}",
								"{{payment_product}}",
								"{{payment_id}}",
								"authorisations"
							]
						},
						"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
					},
					"response": []
				},
				{
					"name": "5. Update PSU data for payment initiation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a37b188-7729-446e-bc83-81dbdf9e8aac",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('SCA status is scaMethodSelected', () => {",
									"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
									"});",
									"",
									"pm.test(\"Links exist\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    ",
									"    pm.expect(_links).to.have.property('scaStatus');",
									"    pm.expect(_links).to.have.property('authoriseTransaction');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_multilevel_1}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"{{payment_service}}",
								"{{payment_product}}",
								"{{payment_id}}",
								"authorisations",
								"{{authorisation_id}}"
							]
						},
						"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
					},
					"response": []
				},
				{
					"name": "6. Payment initiation status request -> ACTC",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "183a217c-ab12-4de5-a54e-371826c56663",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Test transaction status\", () => {",
									"    pm.expect(jsonData).to.have.property('transactionStatus');",
									"    // pm.expect(jsonData.transactionStatus).to.eql('ACTC');",
									"        // https://git.adorsys.de/adorsys/xs2a/psd2-dynamic-sandbox/-/issues/843",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, application/xml"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/status",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"{{payment_service}}",
								"{{payment_product}}",
								"{{payment_id}}",
								"status"
							]
						},
						"description": "Check the transaction status of a payment initiation."
					},
					"response": []
				},
				{
					"name": "7. Update PSU data for payment initiation finalized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6722a6a6-350e-4b64-aafa-fe0bc1c6d0f8",
								"exec": [
									"pm.test('Status code is 200', () => {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Sca status is finalised', () => {",
									"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
									"});",
									"",
									"pm.test(\"Select scaStatus link exists\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    pm.expect(_links).to.have.property('scaStatus');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_multilevel_1}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"{{payment_service}}",
								"{{payment_product}}",
								"{{payment_id}}",
								"authorisations",
								"{{authorisation_id}}"
							]
						},
						"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
					},
					"response": []
				},
				{
					"name": "8. Payment initiation status request -> PATC",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c37240fc-a209-495a-98f1-3acc090b1e5b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Test transaction status\", () => {",
									"    pm.expect(jsonData).to.have.property('transactionStatus');",
									"    pm.expect(jsonData.transactionStatus).to.eql('PATC');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, application/xml"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/status",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"{{payment_service}}",
								"{{payment_product}}",
								"{{payment_id}}",
								"status"
							]
						},
						"description": "Check the transaction status of a payment initiation."
					},
					"response": []
				},
				{
					"name": "9. Start the authorisation process for a payment initiation second PSU",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7aca4432-0981-4e61-b4bc-54e5c2c8dcc5",
								"exec": [
									"pm.globals.unset(\"authorisation_id\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e5bfa44f-e561-4fdb-97c1-519fda44fb69",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
									"",
									"pm.globals.set(\"authorisation_id\", authorisationId);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Select scaStatus \", () => {",
									"    pm.expect(jsonData).to.have.property('scaStatus');",
									"    const scaStatus = jsonData.scaStatus;",
									"    pm.expect(scaStatus).to.eql('psuIdentified');",
									"});",
									"",
									"pm.test(\"Links exist\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    ",
									"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
									"    pm.expect(_links).to.have.property('scaStatus');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_multilevel_2}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"{{payment_service}}",
								"{{payment_product}}",
								"{{payment_id}}",
								"authorisations"
							]
						},
						"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
					},
					"response": []
				},
				{
					"name": "10. Update PSU data for payment initiation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "495c4e97-5699-4a7e-b2b7-f703cfea522f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('SCA status is scaMethodSelected', () => {",
									"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
									"});",
									"",
									"pm.test(\"Links exist\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    ",
									"    pm.expect(_links).to.have.property('scaStatus');",
									"    pm.expect(_links).to.have.property('authoriseTransaction');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_multilevel_2}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"{{payment_service}}",
								"{{payment_product}}",
								"{{payment_id}}",
								"authorisations",
								"{{authorisation_id}}"
							]
						},
						"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
					},
					"response": []
				},
				{
					"name": "11. Payment initiation status request -> PATC",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f99b77a-dabf-4cbc-8964-632d939393ba",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Test transaction status\", () => {",
									"    pm.expect(jsonData).to.have.property('transactionStatus');",
									"    pm.expect(jsonData.transactionStatus).to.eql('PATC');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, application/xml"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/status",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"{{payment_service}}",
								"{{payment_product}}",
								"{{payment_id}}",
								"status"
							]
						},
						"description": "Check the transaction status of a payment initiation."
					},
					"response": []
				},
				{
					"name": "12. Update PSU data for payment initiation finalized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dbb1f027-9cbc-446b-b41f-8d5126d00275",
								"exec": [
									"pm.test('Status code is 200', () => {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Sca status is finalised', () => {",
									"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
									"});",
									"",
									"pm.test(\"Select scaStatus link exists\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    pm.expect(_links).to.have.property('scaStatus');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_multilevel_2}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"{{payment_service}}",
								"{{payment_product}}",
								"{{payment_id}}",
								"authorisations",
								"{{authorisation_id}}"
							]
						},
						"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
					},
					"response": []
				},
				{
					"name": "13. Payment initiation status request -> ACSP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec72e414-ff94-4b7e-9567-398435ff2f20",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Test transaction status\", () => {",
									"    pm.expect(jsonData).to.have.property('transactionStatus');",
									"    // pm.expect(jsonData.transactionStatus).to.eql('ACSP');",
									"        // https://git.adorsys.de/adorsys/xs2a/psd2-dynamic-sandbox/-/issues/843",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, application/xml"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/status",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"{{payment_service}}",
								"{{payment_product}}",
								"{{payment_id}}",
								"status"
							]
						},
						"description": "Check the transaction status of a payment initiation."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "AIS",
			"item": [
				{
					"name": "1. Set embedded SCA approach",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa7657a9-a9bb-410b-ae34-abd6a70f602c",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
						},
						"url": {
							"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_aspsp_profile}}"
							],
							"path": [
								"api",
								"v1",
								"aspsp-profile",
								"for-debug",
								"sca-approaches"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create consent dedicated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e10f793-fa48-4fdd-97fb-1b89cbb1ae87",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Consent Id exists\", () => {",
									"   pm.expect(jsonData).to.have.property('consentId');",
									"});",
									"",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Update PSU authentication link exists\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    ",
									"    var updatePsuAuthentication = _links.startAuthorisationWithPsuAuthentication.href;",
									"",
									"    if (updatePsuAuthentication === undefined) {",
									"       pm.expect().fail();",
									"    }",
									"});",
									"",
									"pm.test(\"Consent status is received\", () => {",
									"    pm.expect(jsonData.consentStatus).to.eql('received');",
									"});",
									"",
									"pm.globals.set(\"consent_id\", jsonData.consentId);",
									"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "58524cea-ec85-4cca-a0db-d930211cad30",
								"exec": [
									"pm.globals.unset(\"consent_id\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_multilevel_1}}",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "psu-ip-address",
								"value": "{{ip_address}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_multilevel}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_multilevel}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_multilevel}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"consents"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Start the authorisation process for a consent first PSU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "daf579e4-8352-4edd-9f02-22334c47930e",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
									"",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"updatePsuAuthentication link exists\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    ",
									"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
									"});",
									"",
									"pm.test(\"Select scaStatus \", () => {",
									"    pm.expect(jsonData).to.have.property('scaStatus');",
									"    const scaStatus = jsonData.scaStatus;",
									"    pm.expect(scaStatus).to.eql('psuIdentified');",
									"});",
									"",
									"pm.globals.set(\"authorisation_id\", authorisationId);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2c72d380-0322-401c-80e4-8c7fa285eda0",
								"exec": [
									"pm.globals.unset(\"authorisation_id\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_multilevel_1}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consent_id}}",
								"authorisations"
							]
						},
						"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
					},
					"response": []
				},
				{
					"name": "4. Update PSU Data for consents",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "004b642d-ba76-4579-8d8d-23b83d48b974",
								"exec": [
									"pm.test('Status code is 200', () => {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Sca status is scaMethodSelected', () => {",
									"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
									"});",
									"",
									"pm.test(\"Select authoriseTransaction method link exists\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    pm.expect(_links).to.have.property('authoriseTransaction');",
									"});",
									"",
									"pm.test(\"Select chosenScaMethod exist\", () => {",
									"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
									"    const chosenScaMethod = jsonData.chosenScaMethod;",
									"    ",
									"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
									"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
									"    ",
									"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
									"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
									"});",
									"",
									"pm.test(\"Challenge data exist\", () => {",
									"    pm.expect(jsonData).to.have.property('challengeData');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_multilevel_1}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consent_id}}",
								"authorisations",
								"{{authorisation_id}}"
							]
						},
						"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
					},
					"response": []
				},
				{
					"name": "5. Consent status request -> received",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "002f7018-5b39-4e94-80d3-6b8ad7f17f00",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Test consent status\", () => {",
									"    pm.expect(jsonData).to.have.property('consentStatus');",
									"    pm.expect(jsonData.consentStatus).to.eql('received');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consent_id}}",
								"status"
							]
						},
						"description": "Read the status of an account information consent resource."
					},
					"response": []
				},
				{
					"name": "6. Update PSU Data for consents finalization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2388278e-d6b9-4257-bf9c-04e2f7e4fccf",
								"exec": [
									"pm.test('Status code is 200', () => {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Sca status is finalised', () => {",
									"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
									"});",
									"",
									"pm.test(\"Select scaStatus link exists\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    pm.expect(_links).to.have.property('scaStatus');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_multilevel_1}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consent_id}}",
								"authorisations",
								"{{authorisation_id}}"
							]
						},
						"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
					},
					"response": []
				},
				{
					"name": "7. Consent status request -> partiallyAuthorised",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f00948c-e179-41d8-9ede-f46722433e51",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Test consent status\", () => {",
									"    pm.expect(jsonData).to.have.property('consentStatus');",
									"    // pm.expect(jsonData.consentStatus).to.eql('partiallyAuthorised');",
									"        // https://git.adorsys.de/adorsys/xs2a/psd2-dynamic-sandbox/-/issues/843",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consent_id}}",
								"status"
							]
						},
						"description": "Read the status of an account information consent resource."
					},
					"response": []
				},
				{
					"name": "8. Start the authorisation process for a consent second PSU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abd24405-44d0-4887-bbdc-3fbb207f59d5",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
									"",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"updatePsuAuthentication link exists\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    ",
									"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
									"});",
									"",
									"pm.test(\"Select scaStatus \", () => {",
									"    pm.expect(jsonData).to.have.property('scaStatus');",
									"    const scaStatus = jsonData.scaStatus;",
									"    pm.expect(scaStatus).to.eql('psuIdentified');",
									"});",
									"",
									"pm.globals.set(\"authorisation_id\", authorisationId);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2f939fb1-d7bb-4b2b-b44d-62d9e9e7cafc",
								"exec": [
									"pm.globals.unset(\"authorisation_id\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_multilevel_2}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consent_id}}",
								"authorisations"
							]
						},
						"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
					},
					"response": []
				},
				{
					"name": "9. Update PSU Data for consents",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0256129-0c02-4ad9-9c26-e60585fa51f5",
								"exec": [
									"pm.test('Status code is 200', () => {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Sca status is scaMethodSelected', () => {",
									"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
									"});",
									"",
									"pm.test(\"Select authoriseTransaction method link exists\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    pm.expect(_links).to.have.property('authoriseTransaction');",
									"});",
									"",
									"pm.test(\"Select chosenScaMethod exist\", () => {",
									"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
									"    const chosenScaMethod = jsonData.chosenScaMethod;",
									"    ",
									"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
									"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
									"    ",
									"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
									"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
									"});",
									"",
									"pm.test(\"Challenge data exist\", () => {",
									"    pm.expect(jsonData).to.have.property('challengeData');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_multilevel_2}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consent_id}}",
								"authorisations",
								"{{authorisation_id}}"
							]
						},
						"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
					},
					"response": []
				},
				{
					"name": "10. Consent status request -> partiallyAuthorised",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c97da921-02cd-4868-9621-e404c8aad11b",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Test consent status\", () => {",
									"    pm.expect(jsonData).to.have.property('consentStatus');",
									"    // pm.expect(jsonData.consentStatus).to.eql('partiallyAuthorised');",
									"    // https://git.adorsys.de/adorsys/xs2a/psd2-dynamic-sandbox/-/issues/843",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consent_id}}",
								"status"
							]
						},
						"description": "Read the status of an account information consent resource."
					},
					"response": []
				},
				{
					"name": "11. Update PSU Data for consents finalization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad080367-67a5-47c9-a137-c3bb664ba200",
								"exec": [
									"pm.test('Status code is 200', () => {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Sca status is finalised', () => {",
									"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
									"});",
									"",
									"pm.test(\"Select scaStatus link exists\", () => {",
									"    pm.expect(jsonData).to.have.property('_links');",
									"    const _links = jsonData._links;",
									"    pm.expect(_links).to.have.property('scaStatus');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "PSU-ID",
								"value": "{{psu_id_multilevel_2}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consent_id}}",
								"authorisations",
								"{{authorisation_id}}"
							]
						},
						"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
					},
					"response": []
				},
				{
					"name": "12. Consent status request -> valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b925dcef-1c6f-4c92-a9d7-98d3aef290c0",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Test consent status\", () => {",
									"    pm.expect(jsonData).to.have.property('consentStatus');",
									"    pm.expect(jsonData.consentStatus).to.eql('valid');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consent_id}}",
								"status"
							]
						},
						"description": "Read the status of an account information consent resource."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}