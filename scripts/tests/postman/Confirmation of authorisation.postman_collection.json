{
	"info": {
		"_postman_id": "c3dd214d-dc9c-4519-a6d3-79c587f74f5a",
		"name": "Confirmation of authorisation",
		"description": "Note, this collection works correct only after switching the boolean flag `authorisation_confirmation_enabled` to `true` in ledgers.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "AIS",
			"item": [
				{
					"name": "Confirmation by SPI",
					"item": [
						{
							"name": "Consent dedicated REDIRECT - confirmation of authorisation Ledgers",
							"item": [
								{
									"name": "1. Set redirect SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e620a3f-bb24-40b7-8cf4-b728bb0a39a8",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set authorisation confirmation check in ASPSP profile settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2d66b08-0ce7-4d64-a0f5-d33014d2bd47",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": true,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create AIS consent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a5364258-3008-44b3-8ed5-3cde5673715e",
												"exec": [
													"pm.globals.unset(\"consent_id\");",
													"pm.globals.unset(\"redirect_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bbb26990-291f-49ed-bdb6-4054036ab9cc",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"",
													"const scaRedirectLink = jsonData._links.scaRedirect.href;",
													"",
													"if (scaRedirectLink !== undefined) {",
													"    var a = scaRedirectLink.split('/');",
													"    a.pop();",
													"    const authorisationId = a.pop();",
													"    pm.globals.set(\"authorisation_id\", authorisationId);",
													"}",
													"",
													"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
													"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
													"pm.globals.set(\"redirect_id\", redirectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "date",
												"value": "Sun, 11 Aug 2019 15:02:37 GMT"
											},
											{
												"key": "tpp-qwac-certificate",
												"value": "qwac certificate",
												"disabled": true
											},
											{
												"key": "x-request-id",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"type": "text",
												"value": "true"
											},
											{
												"key": "TPP-Redirect-URI",
												"type": "text",
												"value": "TPP-Redirect-URI"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"type": "text",
												"value": "TPP-Nok-Redirect-URI"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_single}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_single}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_single}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": true,\n      \"validUntil\": \"2021-12-31\"\n    }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										},
										"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
									},
									"response": []
								},
								{
									"name": "4. Get consent response object by redirect ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9691a195-d44c-4952-a387-3d4a6afcaa49",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Authorisation id is present\", () => {",
													"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
													"});",
													"",
													"pm.test(\"Redirect URLs are present\", () => {",
													"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
													"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
													"});",
													"",
													"const authorisationId = jsonData.authorisationId;",
													"pm.test(\"Authorisation id is correct\", () => {",
													"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
													"});",
													"",
													"pm.test(\"Consent id is present\", () => {",
													"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
													"});",
													"",
													"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
													"pm.globals.set(\"authorisation_id\", authorisationId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "38fad98b-aa8f-4383-8bb1-450f90fe44ec",
												"exec": [
													"pm.globals.unset(\"internal_consent_id\");",
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"redirect",
												"{{redirect_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Authorise in ledgers for consent processing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9770dd47-d8c9-409d-bf42-b9bb4c637a14",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
													"});",
													"",
													"const tokenWithoutQuotes = JSON.stringify(jsonData.bearerToken.access_token).replace(/\"/g,\"\");",
													"pm.globals.set(\"ledgersBearerToken\", tokenWithoutQuotes);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"type": "text",
												"value": "{{psu_id_none}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/users/loginForConsent?login={{psu_id_single}}&pin={{psu_id_password}}&consentId={{internal_consent_id}}&authorisationId={{authorisation_id}}&opType=CONSENT",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"users",
												"loginForConsent"
											],
											"query": [
												{
													"key": "login",
													"value": "{{psu_id_single}}"
												},
												{
													"key": "pin",
													"value": "{{psu_id_password}}"
												},
												{
													"key": "consentId",
													"value": "{{internal_consent_id}}"
												},
												{
													"key": "authorisationId",
													"value": "{{authorisation_id}}"
												},
												{
													"key": "opType",
													"value": "CONSENT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Start SCA in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "493cd21e-4e3c-4788-9e9d-4327bfce4bc4",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"SCA methods exists\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"});",
													"",
													"pm.globals.set(\"authenticationMethodId\", jsonData.scaMethods[0].id);",
													"",
													"pm.test(\"Consent ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('consentId');",
													"    pm.expect(jsonData.consentId).to.eq(pm.globals.get('internal_consent_id'));",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": \"{{internal_consent_id}}\",\n\t\"tppId\": \"{{tpp_id}}\",\n\t\"frequencyPerDay\": 400,\n\t\"access\": {\n    \t\"accounts\": [\"{{iban_single}}\"],\n    \t\"balances\": [\"{{iban_single}}\"],\n    \t\"transactions\": [\"{{iban_single}}\"]\n\t},\n\t\"validUntil\": \"2021-12-31\",\n\t\"recurringIndicator\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"consents",
												"{{internal_consent_id}}",
												"authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Select SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fb447de-7753-4c7d-998a-ee09edd02f86",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations/{{authorisation_id}}/scaMethods/{{authenticationMethodId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"consents",
												"{{internal_consent_id}}",
												"authorisations",
												"{{authorisation_id}}",
												"scaMethods",
												"{{authenticationMethodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Authorise consent in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f758cb2e-813c-4395-a320-2af9623aef5e",
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.globals.set(\"authorisation_code\", jsonData.authConfirmationCode);",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"var token = JSON.stringify(jsonData);",
													"pm.globals.set(\"ledgersBearerToken\", token);",
													"",
													"const consentResponse = JSON.stringify(jsonData);",
													"pm.globals.set(\"ledgersConsentResponse\", consentResponse);",
													"",
													"pm.test(\"SCA status is unconfirmed\", () => {",
													"   pm.expect(jsonData.scaStatus).to.eq('unconfirmed');",
													"});",
													"",
													"pm.test(\"Auth confirmation code exists\", () => {",
													"   pm.expect(jsonData).to.have.property('authConfirmationCode');",
													"});",
													"",
													"const authConfirmationCode = jsonData.authConfirmationCode;",
													"pm.globals.set(\"authConfirmationCode\", authConfirmationCode);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations/{{authorisation_id}}/authCode?authCode={{tan}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"consents",
												"{{internal_consent_id}}",
												"authorisations",
												"{{authorisation_id}}",
												"authCode"
											],
											"query": [
												{
													"key": "authCode",
													"value": "{{tan}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e31e1f0d-56d3-4018-99eb-89d8bcd46e7a",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "82593ba1-1fa7-416b-b212-da29c3a21aad",
												"exec": [
													"const ledgersConsentResponse = pm.globals.get(\"ledgersConsentResponse\");",
													"var utf8string = CryptoJS.enc.Utf8.parse(ledgersConsentResponse);",
													"",
													"pm.globals.set(\"encodedLedgersConsentResponse\", CryptoJS.enc.Base64.stringify(utf8string));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersConsentResponse}}\",\n  \"consentId\": \"{{consent_id}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"aspsp-consent-data",
												"consents",
												"{{consent_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Update status of authorisation to UNCONFIRMED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10eac65b-4c88-49da-99c5-82bf74fc7c22",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"type": "text",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"authenticationMethodId\": \"SMS\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/UNCONFIRMED",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}",
												"authorisation",
												"{{authorisation_id}}",
												"status",
												"UNCONFIRMED"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Update PSU Data for consents finalization - provide code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6a6470f-9f2b-44c8-9434-4fa31dfda2fe",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"  pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"confirmationCode\": \"{{authConfirmationCode}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Confirmation by XS2A",
					"item": [
						{
							"name": "Consent dedicated REDIRECT - confirmation of authorisation XS2A",
							"item": [
								{
									"name": "1. Set redirect SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25eb5d8e-488b-4127-8ad3-d6ff492203ab",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set authorisation confirmation check in ASPSP profile settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f7ad844-0d94-41ba-a1ac-1cde52913218",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": true,\n    \t\"authorisationConfirmationCheckByXs2a\": true, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create AIS consent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6fbee7b4-53ca-472a-b3ed-e30c285c7700",
												"exec": [
													"pm.globals.unset(\"consent_id\");",
													"pm.globals.unset(\"redirect_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5f1269cc-f112-4338-8d7f-e41ba056bb37",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"",
													"const scaRedirectLink = jsonData._links.scaRedirect.href;",
													"",
													"if (scaRedirectLink !== undefined) {",
													"    var a = scaRedirectLink.split('/');",
													"    a.pop();",
													"    const authorisationId = a.pop();",
													"    pm.globals.set(\"authorisation_id\", authorisationId);",
													"}",
													"",
													"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
													"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
													"pm.globals.set(\"redirect_id\", redirectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "date",
												"value": "Sun, 11 Aug 2019 15:02:37 GMT"
											},
											{
												"key": "tpp-qwac-certificate",
												"value": "qwac certificate",
												"disabled": true
											},
											{
												"key": "x-request-id",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"type": "text",
												"value": "true"
											},
											{
												"key": "TPP-Redirect-URI",
												"type": "text",
												"value": "TPP-Redirect-URI"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"type": "text",
												"value": "TPP-Nok-Redirect-URI"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_single}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_single}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_single}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": true,\n      \"validUntil\": \"2021-12-31\"\n    }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										},
										"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
									},
									"response": []
								},
								{
									"name": "4. Get consent response object by redirect ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c06214e-924c-4e4f-8cfa-f482cf890fd1",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Authorisation id is present\", () => {",
													"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
													"});",
													"",
													"pm.test(\"Redirect URLs are present\", () => {",
													"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
													"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
													"});",
													"",
													"const authorisationId = jsonData.authorisationId;",
													"pm.test(\"Authorisation id is correct\", () => {",
													"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
													"});",
													"",
													"pm.test(\"Consent id is present\", () => {",
													"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
													"});",
													"",
													"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
													"pm.globals.set(\"authorisation_id\", authorisationId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "808a9780-d7d3-4657-91d0-c2b4a72da684",
												"exec": [
													"pm.globals.unset(\"internal_consent_id\");",
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"redirect",
												"{{redirect_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Authorise in ledgers for consent processing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd02a33b-577c-4ed5-9e47-005849ad421c",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
													"});",
													"",
													"const tokenWithoutQuotes = JSON.stringify(jsonData.bearerToken.access_token).replace(/\"/g,\"\");",
													"pm.globals.set(\"ledgersBearerToken\", tokenWithoutQuotes);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"type": "text",
												"value": "{{psu_id_none}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/users/loginForConsent?login={{psu_id_single}}&pin={{psu_id_password}}&consentId={{internal_consent_id}}&authorisationId={{authorisation_id}}&opType=CONSENT",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"users",
												"loginForConsent"
											],
											"query": [
												{
													"key": "login",
													"value": "{{psu_id_single}}"
												},
												{
													"key": "pin",
													"value": "{{psu_id_password}}"
												},
												{
													"key": "consentId",
													"value": "{{internal_consent_id}}"
												},
												{
													"key": "authorisationId",
													"value": "{{authorisation_id}}"
												},
												{
													"key": "opType",
													"value": "CONSENT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Start SCA in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63921bd2-2045-46a5-81e5-326963c040d4",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"SCA methods exists\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"});",
													"",
													"pm.globals.set(\"authenticationMethodId\", jsonData.scaMethods[0].id);",
													"",
													"pm.test(\"Consent ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('consentId');",
													"    pm.expect(jsonData.consentId).to.eq(pm.globals.get('internal_consent_id'));",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": \"{{internal_consent_id}}\",\n\t\"tppId\": \"{{tpp_id}}\",\n\t\"frequencyPerDay\": 400,\n\t\"access\": {\n    \t\"accounts\": [\"{{iban_single}}\"],\n    \t\"balances\": [\"{{iban_single}}\"],\n    \t\"transactions\": [\"{{iban_single}}\"]\n\t},\n\t\"validUntil\": \"2021-12-31\",\n\t\"recurringIndicator\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"consents",
												"{{internal_consent_id}}",
												"authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Select SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22463ac4-101e-4857-94bd-f14535a23207",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations/{{authorisation_id}}/scaMethods/{{authenticationMethodId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"consents",
												"{{internal_consent_id}}",
												"authorisations",
												"{{authorisation_id}}",
												"scaMethods",
												"{{authenticationMethodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Authorise consent in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "058aa471-d294-4a1b-9748-404054e4db9e",
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.globals.set(\"authorisation_code\", jsonData.authConfirmationCode);",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"var token = JSON.stringify(jsonData);",
													"pm.globals.set(\"ledgersBearerToken\", token);",
													"",
													"const consentResponse = JSON.stringify(jsonData);",
													"pm.globals.set(\"ledgersConsentResponse\", consentResponse);",
													"",
													"pm.test(\"SCA status is unconfirmed\", () => {",
													"   pm.expect(jsonData.scaStatus).to.eq('unconfirmed');",
													"});",
													"",
													"pm.test(\"Auth confirmation code exists\", () => {",
													"   pm.expect(jsonData).to.have.property('authConfirmationCode');",
													"});",
													"",
													"const authConfirmationCode = jsonData.authConfirmationCode;",
													"pm.globals.set(\"authConfirmationCode\", authConfirmationCode);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations/{{authorisation_id}}/authCode?authCode={{tan}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"consents",
												"{{internal_consent_id}}",
												"authorisations",
												"{{authorisation_id}}",
												"authCode"
											],
											"query": [
												{
													"key": "authCode",
													"value": "{{tan}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Update ASPSP consent data for the given AIS consent in CMS-PSU-API",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15ae155c-d3dc-4842-a8e9-40a9ebbe8e2a",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5e0e7aa5-e64c-446a-86c0-0d003e795d93",
												"exec": [
													"const ledgersConsentResponse = pm.globals.get(\"ledgersConsentResponse\");",
													"var utf8string = CryptoJS.enc.Utf8.parse(ledgersConsentResponse);",
													"",
													"pm.globals.set(\"encodedLedgersConsentResponse\", CryptoJS.enc.Base64.stringify(utf8string));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersConsentResponse}}\",\n  \"consentId\": \"{{consent_id}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{consent_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"aspsp-consent-data",
												"consents",
												"{{consent_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Update status of authorisation to UNCONFIRMED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acde4988-6d9f-46c2-8e52-3abbb780b506",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"type": "text",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"authenticationMethodId\": \"SMS\",\n\t\"authenticationData\": \"{{authConfirmationCode}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/UNCONFIRMED",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}",
												"authorisation",
												"{{authorisation_id}}",
												"status",
												"UNCONFIRMED"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Update PSU Data for consents finalization - provide code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e1b6fb6-c367-4d5e-905f-a2bcc89e03be",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"  pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"confirmationCode\": \"{{authConfirmationCode}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "40842a60-4b4b-44af-95da-c84632d57696",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0e0d6acc-438f-4043-9a50-525d41d475ac",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "PIS",
			"item": [
				{
					"name": "Confirmation by SPI",
					"item": [
						{
							"name": "Single payment initiation REDIRECT - confirmation of authorisation Ledgers",
							"item": [
								{
									"name": "1. Set redirect SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0cc8400e-640e-4b0f-9745-9de7eae8dce0",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set authorisation confirmation check in ASPSP profile settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93008487-f8bb-4839-931b-e920c07e1742",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n            \"NONE\"\n        ],\n        \"authorisationConfirmationRequestMandated\": true,\n        \"authorisationConfirmationCheckByXs2a\": false,\n        \"checkUriComplianceToDomainSupported\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d8539c04-4682-469b-9345-9fde670deb8d",
												"exec": [
													"pm.globals.unset(\"payment_id\");",
													"pm.globals.unset(\"redirect_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4bea436b-1618-481a-8f9f-d04b6a06cc58",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Payment status is received\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													"",
													"const scaRedirectLink = jsonData._links.scaRedirect.href;",
													"",
													"if (scaRedirectLink !== undefined) {",
													"    var a = scaRedirectLink.split('/');",
													"    a.pop();",
													"    const authorisationId = a.pop();",
													"    pm.globals.set(\"authorisation_id\", authorisationId);",
													"}",
													"",
													"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
													"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
													"pm.globals.set(\"redirect_id\", redirectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "date",
												"value": "Sun, 11 Aug 2019 15:02:37 GMT"
											},
											{
												"key": "x-request-id",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "TPP-Redirect-URI",
												"type": "text",
												"value": "TPP-Redirect-URI"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"type": "text",
												"value": "TPP-Nok-Redirect-URI"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Get payment response object by redirect ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ab92976-ffc1-4db6-8846-e489b5b0feb1",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Authorisation id is correct\", () => {",
													"    pm.expect(jsonData.authorisationId).to.eql(pm.globals.get(\"authorisation_id\"));",
													"});",
													"",
													"const internalPaymentId = jsonData.payment.paymentId;",
													"pm.globals.set(\"internal_payment_id\", internalPaymentId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/redirect/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"payment",
												"redirect",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Authorise in ledgers for payment processing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1db1f812-4821-4cf1-9453-4cdf36df727b",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
													"});",
													"",
													"const tokenWithoutQuotes = JSON.stringify(jsonData.bearerToken.access_token).replace(/\"/g,\"\");",
													"pm.globals.set(\"ledgersBearerToken\", tokenWithoutQuotes);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"type": "text",
												"value": "{{psu_id_none}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/users/loginForConsent?login={{psu_id_single}}&pin={{psu_id_password}}&consentId={{internal_payment_id}}&authorisationId={{authorisation_id}}&opType=PAYMENT",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"users",
												"loginForConsent"
											],
											"query": [
												{
													"key": "login",
													"value": "{{psu_id_single}}"
												},
												{
													"key": "pin",
													"value": "{{psu_id_password}}"
												},
												{
													"key": "consentId",
													"value": "{{internal_payment_id}}"
												},
												{
													"key": "authorisationId",
													"value": "{{authorisation_id}}"
												},
												{
													"key": "opType",
													"value": "PAYMENT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Initiate payment in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78f5fe2d-4784-4589-b475-03f81cfea5d2",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"SCA methods exists\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"});",
													"",
													"pm.globals.set(\"authenticationMethodId\", jsonData.scaMethods[0].id);",
													"",
													"pm.test(\"Payment ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"    pm.expect(jsonData.paymentId).to.eq(pm.globals.get('internal_payment_id'));",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtorAccount\": {\n        \"iban\": \"{{iban_single}}\"\n    },\n    \"targets\": [\n        {\n            \"chargeBearerTO\": \"CRED\",\n            \"creditorAccount\": {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            },\n            \"creditorAddress\": {\n                \"buildingNumber\": \"56\",\n                \"city\": \"Nürnberg\",\n                \"country\": \"DE\",\n                \"postalCode\": \"90543\",\n                \"street\": \"WBG Straße\"\n            },\n            \"creditorAgent\": \"AAAADEBBXXX\",\n            \"creditorName\": \"WBG\",\n            \"currencyOfTransfer\": \"EUR\",\n            \"endToEndIdentification\": \"WBG-123456789\",\n            \"instructedAmount\": {\n                \"amount\": 0.01,\n                \"currency\": \"EUR\"\n            },\n            \"paymentId\": \"{{internal_payment_id}}\",\n            \"purposeCode\": \"BKDF\",\n            \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n        }\n    ],\n    \"paymentProduct\": \"sepa-credit-transfers\",\n    \"paymentId\": \"{{internal_payment_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/payments/?paymentType=SINGLE",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"payments",
												""
											],
											"query": [
												{
													"key": "paymentType",
													"value": "SINGLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Select SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64115767-4e54-4930-80f0-2e31fead6a33",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/payments/{{internal_payment_id}}/authorisations/{{authorisation_id}}/scaMethods/{{authenticationMethodId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"payments",
												"{{internal_payment_id}}",
												"authorisations",
												"{{authorisation_id}}",
												"scaMethods",
												"{{authenticationMethodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Authorise payment in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e9e5afd-be24-4168-bfb0-ab47bfee981e",
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.globals.set(\"authorisation_code\", jsonData.authConfirmationCode);",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"const paymentResponse = JSON.stringify(jsonData);",
													"pm.globals.set(\"ledgersPaymentResponse\", paymentResponse);",
													"",
													"pm.test(\"SCA status is unconfirmed\", () => {",
													"   pm.expect(jsonData.scaStatus).to.eq('unconfirmed');",
													"});",
													"",
													"pm.test(\"Auth confirmation code exists\", () => {",
													"   pm.expect(jsonData).to.have.property('authConfirmationCode');",
													"});",
													"",
													"const authConfirmationCode = jsonData.authConfirmationCode;",
													"pm.globals.set(\"authConfirmationCode\", authConfirmationCode);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/payments/{{internal_payment_id}}/authorisations/{{authorisation_id}}/authCode?authCode={{tan}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"payments",
												"{{internal_payment_id}}",
												"authorisations",
												"{{authorisation_id}}",
												"authCode"
											],
											"query": [
												{
													"key": "authCode",
													"value": "{{tan}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Update ASPSP consent data for the given payment via CMS-PSU-API",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2992d57b-d6e9-4dfd-9ac6-2ce3b6f45a39",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1dea2a11-3e8c-4e66-b954-552e746d16c0",
												"exec": [
													"const ledgersPaymentResponse = pm.globals.get(\"ledgersPaymentResponse\");",
													"const utf8string = CryptoJS.enc.Utf8.parse(ledgersPaymentResponse);",
													"",
													"pm.globals.set(\"encodedLedgersPaymentResponse\", CryptoJS.enc.Base64.stringify(utf8string));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersPaymentResponse}}\",\n  \"consentId\": \"{{payment_id}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"aspsp-consent-data",
												"consents",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Update status of authorisation to UNCONFIRMED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67be4006-93b6-4e05-aee5-6f218cc291e4",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"type": "text",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"authenticationMethodId\": \"SMS\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/{{internal_payment_id}}/authorisation/{{authorisation_id}}/status/UNCONFIRMED",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"payment",
												"{{internal_payment_id}}",
												"authorisation",
												"{{authorisation_id}}",
												"status",
												"UNCONFIRMED"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Update PSU data for payment initiation - provide confirmation code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d44cd802-30ad-419a-a169-873a1bc11590",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"  pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"confirmationCode\": \"{{authConfirmationCode}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Single payment cancellation REDIRECT - confirmation of authorisation Ledgers",
							"item": [
								{
									"name": "1. Set redirect SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64621352-da94-4e4e-b9cf-eba0b06bdbac",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set authorisation confirmation check in ASPSP profile settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5980ed92-a5ae-45ae-b0ad-b9b448ee0eb6",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n            \"NONE\"\n        ],\n        \"authorisationConfirmationRequestMandated\": true,\n        \"authorisationConfirmationCheckByXs2a\": false,\n        \"checkUriComplianceToDomainSupported\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3483dc5c-895d-4579-821c-41e3dba956d1",
												"exec": [
													"pm.globals.unset(\"payment_id\");",
													"pm.globals.unset(\"redirect_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3c9bc888-8439-4711-b57c-c4b0d5420042",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Payment status is received\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													"",
													"const scaRedirectLink = jsonData._links.scaRedirect.href;",
													"",
													"if (scaRedirectLink !== undefined) {",
													"    var a = scaRedirectLink.split('/');",
													"    a.pop();",
													"    const authorisationId = a.pop();",
													"    pm.globals.set(\"authorisation_id\", authorisationId);",
													"}",
													"",
													"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
													"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
													"pm.globals.set(\"redirect_id\", redirectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "date",
												"value": "Sun, 11 Aug 2019 15:02:37 GMT"
											},
											{
												"key": "x-request-id",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "TPP-Redirect-URI",
												"type": "text",
												"value": "TPP-Redirect-URI"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"type": "text",
												"value": "TPP-Nok-Redirect-URI"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Get payment response object by redirect ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "921dbdd7-34f8-486b-81b2-8b4469b3dd40",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Authorisation id is correct\", () => {",
													"    pm.expect(jsonData.authorisationId).to.eql(pm.globals.get(\"authorisation_id\"));",
													"});",
													"",
													"const internalPaymentId = jsonData.payment.paymentId;",
													"pm.globals.set(\"internal_payment_id\", internalPaymentId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/redirect/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"payment",
												"redirect",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Authorise in ledgers for payment processing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7336647-d6ca-4433-9f1a-a3dda41424c8",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
													"});",
													"",
													"const tokenWithoutQuotes = JSON.stringify(jsonData.bearerToken.access_token).replace(/\"/g,\"\");",
													"pm.globals.set(\"ledgersBearerToken\", tokenWithoutQuotes);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"type": "text",
												"value": "{{psu_id_none}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/users/loginForConsent?login={{psu_id_single}}&pin={{psu_id_password}}&consentId={{internal_payment_id}}&authorisationId={{authorisation_id}}&opType=PAYMENT",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"users",
												"loginForConsent"
											],
											"query": [
												{
													"key": "login",
													"value": "{{psu_id_single}}"
												},
												{
													"key": "pin",
													"value": "{{psu_id_password}}"
												},
												{
													"key": "consentId",
													"value": "{{internal_payment_id}}"
												},
												{
													"key": "authorisationId",
													"value": "{{authorisation_id}}"
												},
												{
													"key": "opType",
													"value": "PAYMENT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Initiate payment in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6306244-c01b-4944-84b1-ab01749ed029",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"SCA methods exists\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"});",
													"",
													"pm.globals.set(\"authenticationMethodId\", jsonData.scaMethods[0].id);",
													"",
													"pm.test(\"Payment ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"    pm.expect(jsonData.paymentId).to.eq(pm.globals.get('internal_payment_id'));",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtorAccount\": {\n        \"iban\": \"{{iban_single}}\"\n    },\n    \"targets\": [\n        {\n            \"chargeBearerTO\": \"CRED\",\n            \"creditorAccount\": {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            },\n            \"creditorAddress\": {\n                \"buildingNumber\": \"56\",\n                \"city\": \"Nürnberg\",\n                \"country\": \"DE\",\n                \"postalCode\": \"90543\",\n                \"street\": \"WBG Straße\"\n            },\n            \"creditorAgent\": \"AAAADEBBXXX\",\n            \"creditorName\": \"WBG\",\n            \"currencyOfTransfer\": \"EUR\",\n            \"endToEndIdentification\": \"WBG-123456789\",\n            \"instructedAmount\": {\n                \"amount\": 0.01,\n                \"currency\": \"EUR\"\n            },\n            \"paymentId\": \"{{internal_payment_id}}\",\n            \"purposeCode\": \"BKDF\",\n            \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n        }\n    ],\n    \"paymentProduct\": \"sepa-credit-transfers\",\n    \"paymentId\": \"{{internal_payment_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/payments/?paymentType=SINGLE",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"payments",
												""
											],
											"query": [
												{
													"key": "paymentType",
													"value": "SINGLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Select SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65ede4fc-871e-4f41-94bd-3c29099eea2d",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/payments/{{internal_payment_id}}/authorisations/{{authorisation_id}}/scaMethods/{{authenticationMethodId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"payments",
												"{{internal_payment_id}}",
												"authorisations",
												"{{authorisation_id}}",
												"scaMethods",
												"{{authenticationMethodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Authorise payment in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39a74009-8733-4296-bf43-87e57b58dc65",
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.globals.set(\"authorisation_code\", jsonData.authConfirmationCode);",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"const paymentResponse = JSON.stringify(jsonData);",
													"pm.globals.set(\"ledgersPaymentResponse\", paymentResponse);",
													"",
													"pm.test(\"SCA status is unconfirmed\", () => {",
													"   pm.expect(jsonData.scaStatus).to.eq('unconfirmed');",
													"});",
													"",
													"pm.test(\"Auth confirmation code exists\", () => {",
													"   pm.expect(jsonData).to.have.property('authConfirmationCode');",
													"});",
													"",
													"const authConfirmationCode = jsonData.authConfirmationCode;",
													"pm.globals.set(\"authConfirmationCode\", authConfirmationCode);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/payments/{{internal_payment_id}}/authorisations/{{authorisation_id}}/authCode?authCode={{tan}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"payments",
												"{{internal_payment_id}}",
												"authorisations",
												"{{authorisation_id}}",
												"authCode"
											],
											"query": [
												{
													"key": "authCode",
													"value": "{{tan}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Update ASPSP consent data for the given payment via CMS-PSU-API",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0cf053b6-1ba6-4e90-8630-9a419d05a752",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "716a785f-9874-4427-add4-5e75b5e2e012",
												"exec": [
													"const ledgersPaymentResponse = pm.globals.get(\"ledgersPaymentResponse\");",
													"const utf8string = CryptoJS.enc.Utf8.parse(ledgersPaymentResponse);",
													"",
													"pm.globals.set(\"encodedLedgersPaymentResponse\", CryptoJS.enc.Base64.stringify(utf8string));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersPaymentResponse}}\",\n  \"consentId\": \"{{payment_id}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"aspsp-consent-data",
												"consents",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Update status of authorisation to UNCONFIRMED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0aa10a61-4d5a-41d7-8ac4-e24274bd4c46",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"type": "text",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"authenticationMethodId\": \"SMS\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/{{internal_payment_id}}/authorisation/{{authorisation_id}}/status/UNCONFIRMED",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"payment",
												"{{internal_payment_id}}",
												"authorisation",
												"{{authorisation_id}}",
												"status",
												"UNCONFIRMED"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Update PSU data for payment initiation - provide confirmation code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20d549b6-7f7f-4b41-933d-291950933c50",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"  pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"confirmationCode\": \"{{authConfirmationCode}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "12. Cancel payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16dd9e7f-e7cb-40a1-b2a5-cf2157165450",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Transcation status is ACSP\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('ACSP');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('status');",
													"    ",
													"});",
													"",
													"const parts = jsonData._links.scaStatus.href.split('/');",
													"const authorisationId = parts[ parts.length - 1 ];",
													"",
													"pm.globals.set(\"cancellation_id\", authorisationId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "13. Authorise in ledgers for payment cancellation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2852a865-6ee8-45f6-9ebd-c97750b79945",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('cancellation_id'));",
													"});",
													"",
													"const tokenWithoutQuotes = JSON.stringify(jsonData.bearerToken.access_token).replace(/\"/g,\"\");",
													"pm.globals.set(\"ledgersBearerToken\", tokenWithoutQuotes);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/users/loginForConsent?login={{psu_id_single}}&pin={{psu_id_password}}&consentId={{internal_payment_id}}&authorisationId={{cancellation_id}}&opType=CANCEL_PAYMENT",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"users",
												"loginForConsent"
											],
											"query": [
												{
													"key": "login",
													"value": "{{psu_id_single}}"
												},
												{
													"key": "pin",
													"value": "{{psu_id_password}}"
												},
												{
													"key": "consentId",
													"value": "{{internal_payment_id}}"
												},
												{
													"key": "authorisationId",
													"value": "{{cancellation_id}}"
												},
												{
													"key": "opType",
													"value": "CANCEL_PAYMENT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "14. Select SCA method for cancellation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef76b678-b403-4ceb-991d-e790f6c0071f",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/payments/{{internal_payment_id}}/cancellation-authorisations/{{cancellation_id}}/scaMethods/{{authenticationMethodId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"payments",
												"{{internal_payment_id}}",
												"cancellation-authorisations",
												"{{cancellation_id}}",
												"scaMethods",
												"{{authenticationMethodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "15. Authorise payment cancellation in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "576633c5-2a3d-4220-86c3-b4181780dff1",
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.globals.set(\"authorisation_code\", jsonData.authConfirmationCode);",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"const paymentResponse = JSON.stringify(jsonData);",
													"pm.globals.set(\"ledgersPaymentResponse\", paymentResponse);",
													"",
													"pm.test(\"SCA status is unconfirmed\", () => {",
													"   pm.expect(jsonData.scaStatus).to.eq('unconfirmed');",
													"});",
													"",
													"pm.test(\"Auth confirmation code exists\", () => {",
													"   pm.expect(jsonData).to.have.property('authConfirmationCode');",
													"});",
													"",
													"const authConfirmationCode = jsonData.authConfirmationCode;",
													"pm.globals.set(\"authConfirmationCode\", authConfirmationCode);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/payments/{{internal_payment_id}}/cancellation-authorisations/{{cancellation_id}}/authCode?authCode={{tan}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"payments",
												"{{internal_payment_id}}",
												"cancellation-authorisations",
												"{{cancellation_id}}",
												"authCode"
											],
											"query": [
												{
													"key": "authCode",
													"value": "{{tan}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "16. Update cancellation authorisation status to UNCONFIRMED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "041c57df-e997-4aac-83fa-e26e48878542",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "82735ba8-5c84-4db0-a7dd-e6cd471c5519",
												"exec": [
													"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
													"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
													"",
													"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"authenticationMethodId\": \"SMS\",\n\t\"authenticationData\": \"qqq123\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/{{internal_payment_id}}/authorisation/{{cancellation_id}}/status/UNCONFIRMED",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"payment",
												"{{internal_payment_id}}",
												"authorisation",
												"{{cancellation_id}}",
												"status",
												"UNCONFIRMED"
											]
										}
									},
									"response": []
								},
								{
									"name": "17. Update PSU data for payment cancellation - provide code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ca40f26-1dab-482e-959a-612452c7c964",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"  pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"confirmationCode\": \"{{authConfirmationCode}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{cancellation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{cancellation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "18. Get payment initiation status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3421169d-5fd4-481c-82c5-53fae2ec61a7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Test transaction status\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionStatus');",
													"    pm.expect(jsonData.transactionStatus).to.eql('CANC');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "test data",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"status"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Confirmation by XS2A",
					"item": [
						{
							"name": "Single payment initiation REDIRECT - confirmation of authorisation XS2A",
							"item": [
								{
									"name": "1. Set redirect SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3671196c-6983-4fc2-81a5-2b68533c275f",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set authorisation confirmation check in ASPSP profile settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "024be224-adbd-4485-934d-45005dcc8905",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n            \"NONE\"\n        ],\n        \"authorisationConfirmationRequestMandated\": true,\n        \"authorisationConfirmationCheckByXs2a\": true,\n        \"checkUriComplianceToDomainSupported\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "13936889-70e0-4a2d-b84e-bc695060526f",
												"exec": [
													"pm.globals.unset(\"payment_id\");",
													"pm.globals.unset(\"redirect_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3ec36d55-72c2-4e3e-b88a-5607ec78b37f",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Payment status is received\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													"",
													"const scaRedirectLink = jsonData._links.scaRedirect.href;",
													"",
													"if (scaRedirectLink !== undefined) {",
													"    var a = scaRedirectLink.split('/');",
													"    a.pop();",
													"    const authorisationId = a.pop();",
													"    pm.globals.set(\"authorisation_id\", authorisationId);",
													"}",
													"",
													"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
													"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
													"pm.globals.set(\"redirect_id\", redirectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "date",
												"value": "Sun, 11 Aug 2019 15:02:37 GMT"
											},
											{
												"key": "x-request-id",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "TPP-Redirect-URI",
												"type": "text",
												"value": "TPP-Redirect-URI"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"type": "text",
												"value": "TPP-Nok-Redirect-URI"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Get payment response object by redirect ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df74abbf-87da-4852-8ef7-3247f34eec6a",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Authorisation id is correct\", () => {",
													"    pm.expect(jsonData.authorisationId).to.eql(pm.globals.get(\"authorisation_id\"));",
													"});",
													"",
													"const internalPaymentId = jsonData.payment.paymentId;",
													"pm.globals.set(\"internal_payment_id\", internalPaymentId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/redirect/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"payment",
												"redirect",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Authorise in ledgers for payment processing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28ab2dd7-8a52-4e7f-8f77-61c335e90b0d",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
													"});",
													"",
													"const tokenWithoutQuotes = JSON.stringify(jsonData.bearerToken.access_token).replace(/\"/g,\"\");",
													"pm.globals.set(\"ledgersBearerToken\", tokenWithoutQuotes);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"type": "text",
												"value": "{{psu_id_none}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/users/loginForConsent?login={{psu_id_single}}&pin={{psu_id_password}}&consentId={{internal_payment_id}}&authorisationId={{authorisation_id}}&opType=PAYMENT",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"users",
												"loginForConsent"
											],
											"query": [
												{
													"key": "login",
													"value": "{{psu_id_single}}"
												},
												{
													"key": "pin",
													"value": "{{psu_id_password}}"
												},
												{
													"key": "consentId",
													"value": "{{internal_payment_id}}"
												},
												{
													"key": "authorisationId",
													"value": "{{authorisation_id}}"
												},
												{
													"key": "opType",
													"value": "PAYMENT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Initiate payment in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36b0fc6d-0ce7-4326-af5c-7735cf40d8f1",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"SCA methods exists\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"});",
													"",
													"pm.globals.set(\"authenticationMethodId\", jsonData.scaMethods[0].id);",
													"",
													"pm.test(\"Payment ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"    pm.expect(jsonData.paymentId).to.eq(pm.globals.get('internal_payment_id'));",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtorAccount\": {\n        \"iban\": \"{{iban_single}}\"\n    },\n    \"targets\": [\n        {\n            \"chargeBearerTO\": \"CRED\",\n            \"creditorAccount\": {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            },\n            \"creditorAddress\": {\n                \"buildingNumber\": \"56\",\n                \"city\": \"Nürnberg\",\n                \"country\": \"DE\",\n                \"postalCode\": \"90543\",\n                \"street\": \"WBG Straße\"\n            },\n            \"creditorAgent\": \"AAAADEBBXXX\",\n            \"creditorName\": \"WBG\",\n            \"currencyOfTransfer\": \"EUR\",\n            \"endToEndIdentification\": \"WBG-123456789\",\n            \"instructedAmount\": {\n                \"amount\": 0.01,\n                \"currency\": \"EUR\"\n            },\n            \"paymentId\": \"{{internal_payment_id}}\",\n            \"purposeCode\": \"BKDF\",\n            \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n        }\n    ],\n    \"paymentProduct\": \"sepa-credit-transfers\",\n    \"paymentId\": \"{{internal_payment_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/payments/?paymentType=SINGLE",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"payments",
												""
											],
											"query": [
												{
													"key": "paymentType",
													"value": "SINGLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Select SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44e43151-cde5-484c-8221-9a9503174d86",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/payments/{{internal_payment_id}}/authorisations/{{authorisation_id}}/scaMethods/{{authenticationMethodId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"payments",
												"{{internal_payment_id}}",
												"authorisations",
												"{{authorisation_id}}",
												"scaMethods",
												"{{authenticationMethodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Authorise payment in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f7bc343-a8f5-48a5-ab21-8eb84589658d",
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.globals.set(\"authorisation_code\", jsonData.authConfirmationCode);",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"const paymentResponse = JSON.stringify(jsonData);",
													"pm.globals.set(\"ledgersPaymentResponse\", paymentResponse);",
													"",
													"pm.test(\"SCA status is unconfirmed\", () => {",
													"   pm.expect(jsonData.scaStatus).to.eq('unconfirmed');",
													"});",
													"",
													"pm.test(\"Auth confirmation code exists\", () => {",
													"   pm.expect(jsonData).to.have.property('authConfirmationCode');",
													"});",
													"",
													"const authConfirmationCode = jsonData.authConfirmationCode;",
													"pm.globals.set(\"authConfirmationCode\", authConfirmationCode);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/payments/{{internal_payment_id}}/authorisations/{{authorisation_id}}/authCode?authCode={{tan}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"payments",
												"{{internal_payment_id}}",
												"authorisations",
												"{{authorisation_id}}",
												"authCode"
											],
											"query": [
												{
													"key": "authCode",
													"value": "{{tan}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Update ASPSP consent data for the given payment via CMS-PSU-API",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "259e09ab-1a40-40b6-b862-a43e1364fe05",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d8474f07-a277-4c78-afde-e5b39fd37f6c",
												"exec": [
													"const ledgersPaymentResponse = pm.globals.get(\"ledgersPaymentResponse\");",
													"const utf8string = CryptoJS.enc.Utf8.parse(ledgersPaymentResponse);",
													"",
													"pm.globals.set(\"encodedLedgersPaymentResponse\", CryptoJS.enc.Base64.stringify(utf8string));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersPaymentResponse}}\",\n  \"consentId\": \"{{payment_id}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"aspsp-consent-data",
												"consents",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Update status of authorisation to UNCONFIRMED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8f13dee-29e6-4d65-b75f-2987597029ec",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"type": "text",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationMethodId\": \"SMS\",\n    \"authenticationData\": \"{{authConfirmationCode}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/{{internal_payment_id}}/authorisation/{{authorisation_id}}/status/UNCONFIRMED",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"payment",
												"{{internal_payment_id}}",
												"authorisation",
												"{{authorisation_id}}",
												"status",
												"UNCONFIRMED"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Update PSU data for payment initiation - provide confirmation code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bc66bcb-2040-4ddf-9835-fc43a2696464",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"  pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"confirmationCode\": \"{{authConfirmationCode}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Single payment cancellation REDIRECT - confirmation of authorisation XS2A",
							"item": [
								{
									"name": "1. Set redirect SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bac33105-18e0-4abe-885a-5f216bc19259",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set authorisation confirmation check in ASPSP profile settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "138cbc07-32bf-4613-ae4e-fa72a2de079b",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n            \"NONE\"\n        ],\n        \"authorisationConfirmationRequestMandated\": true,\n        \"authorisationConfirmationCheckByXs2a\": true,\n        \"checkUriComplianceToDomainSupported\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "87613748-f63f-402b-82f6-210cb81bede4",
												"exec": [
													"pm.globals.unset(\"payment_id\");",
													"pm.globals.unset(\"redirect_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "51881fb1-bb5d-4e66-9fc2-5754ba106d8b",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Payment status is received\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													"",
													"const scaRedirectLink = jsonData._links.scaRedirect.href;",
													"",
													"if (scaRedirectLink !== undefined) {",
													"    var a = scaRedirectLink.split('/');",
													"    a.pop();",
													"    const authorisationId = a.pop();",
													"    pm.globals.set(\"authorisation_id\", authorisationId);",
													"}",
													"",
													"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
													"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
													"pm.globals.set(\"redirect_id\", redirectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "date",
												"value": "Sun, 11 Aug 2019 15:02:37 GMT"
											},
											{
												"key": "x-request-id",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "TPP-Redirect-URI",
												"type": "text",
												"value": "TPP-Redirect-URI"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"type": "text",
												"value": "TPP-Nok-Redirect-URI"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Get payment response object by redirect ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "607ced28-4f82-4b0f-817e-c0c4aee1f716",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Authorisation id is correct\", () => {",
													"    pm.expect(jsonData.authorisationId).to.eql(pm.globals.get(\"authorisation_id\"));",
													"});",
													"",
													"const internalPaymentId = jsonData.payment.paymentId;",
													"pm.globals.set(\"internal_payment_id\", internalPaymentId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/redirect/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"payment",
												"redirect",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Authorise in ledgers for payment processing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9c261db-ce79-4370-bd1a-97d2417e44f3",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
													"});",
													"",
													"const tokenWithoutQuotes = JSON.stringify(jsonData.bearerToken.access_token).replace(/\"/g,\"\");",
													"pm.globals.set(\"ledgersBearerToken\", tokenWithoutQuotes);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"type": "text",
												"value": "{{psu_id_none}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/users/loginForConsent?login={{psu_id_single}}&pin={{psu_id_password}}&consentId={{internal_payment_id}}&authorisationId={{authorisation_id}}&opType=PAYMENT",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"users",
												"loginForConsent"
											],
											"query": [
												{
													"key": "login",
													"value": "{{psu_id_single}}"
												},
												{
													"key": "pin",
													"value": "{{psu_id_password}}"
												},
												{
													"key": "consentId",
													"value": "{{internal_payment_id}}"
												},
												{
													"key": "authorisationId",
													"value": "{{authorisation_id}}"
												},
												{
													"key": "opType",
													"value": "PAYMENT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Initiate payment in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17f580d6-e03a-4e05-93d0-ccd99078e42d",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"SCA methods exists\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"});",
													"",
													"pm.globals.set(\"authenticationMethodId\", jsonData.scaMethods[0].id);",
													"",
													"pm.test(\"Payment ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"    pm.expect(jsonData.paymentId).to.eq(pm.globals.get('internal_payment_id'));",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"debtorAccount\": {\n        \"iban\": \"{{iban_single}}\"\n    },\n    \"targets\": [\n        {\n            \"chargeBearerTO\": \"CRED\",\n            \"creditorAccount\": {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            },\n            \"creditorAddress\": {\n                \"buildingNumber\": \"56\",\n                \"city\": \"Nürnberg\",\n                \"country\": \"DE\",\n                \"postalCode\": \"90543\",\n                \"street\": \"WBG Straße\"\n            },\n            \"creditorAgent\": \"AAAADEBBXXX\",\n            \"creditorName\": \"WBG\",\n            \"currencyOfTransfer\": \"EUR\",\n            \"endToEndIdentification\": \"WBG-123456789\",\n            \"instructedAmount\": {\n                \"amount\": 0.01,\n                \"currency\": \"EUR\"\n            },\n            \"paymentId\": \"{{internal_payment_id}}\",\n            \"purposeCode\": \"BKDF\",\n            \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n        }\n    ],\n    \"paymentProduct\": \"sepa-credit-transfers\",\n    \"paymentId\": \"{{internal_payment_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/payments/?paymentType=SINGLE",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"payments",
												""
											],
											"query": [
												{
													"key": "paymentType",
													"value": "SINGLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Select SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94d752c7-74d5-47a5-8c5d-e2d76b797e29",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/payments/{{internal_payment_id}}/authorisations/{{authorisation_id}}/scaMethods/{{authenticationMethodId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"payments",
												"{{internal_payment_id}}",
												"authorisations",
												"{{authorisation_id}}",
												"scaMethods",
												"{{authenticationMethodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Authorise payment in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73621a3c-7712-493a-b402-b92ac859e0dc",
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.globals.set(\"authorisation_code\", jsonData.authConfirmationCode);",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"const paymentResponse = JSON.stringify(jsonData);",
													"pm.globals.set(\"ledgersPaymentResponse\", paymentResponse);",
													"",
													"pm.test(\"SCA status is unconfirmed\", () => {",
													"   pm.expect(jsonData.scaStatus).to.eq('unconfirmed');",
													"});",
													"",
													"pm.test(\"Auth confirmation code exists\", () => {",
													"   pm.expect(jsonData).to.have.property('authConfirmationCode');",
													"});",
													"",
													"const authConfirmationCode = jsonData.authConfirmationCode;",
													"pm.globals.set(\"authConfirmationCode\", authConfirmationCode);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/payments/{{internal_payment_id}}/authorisations/{{authorisation_id}}/authCode?authCode={{tan}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"payments",
												"{{internal_payment_id}}",
												"authorisations",
												"{{authorisation_id}}",
												"authCode"
											],
											"query": [
												{
													"key": "authCode",
													"value": "{{tan}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Update ASPSP consent data for the given payment via CMS-PSU-API",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f86982e-3652-48a5-b668-6fe3077c3f06",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3ac4a607-441b-49c1-ae74-dba7137d191c",
												"exec": [
													"const ledgersPaymentResponse = pm.globals.get(\"ledgersPaymentResponse\");",
													"const utf8string = CryptoJS.enc.Utf8.parse(ledgersPaymentResponse);",
													"",
													"pm.globals.set(\"encodedLedgersPaymentResponse\", CryptoJS.enc.Base64.stringify(utf8string));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersPaymentResponse}}\",\n  \"consentId\": \"{{payment_id}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"aspsp-consent-data",
												"consents",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Update status of authorisation to UNCONFIRMED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5f2fce3-b2b8-453e-ad8a-bd6cac5b41d2",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"type": "text",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationMethodId\": \"SMS\",\n    \"authenticationData\": \"{{authConfirmationCode}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/{{internal_payment_id}}/authorisation/{{authorisation_id}}/status/UNCONFIRMED",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"payment",
												"{{internal_payment_id}}",
												"authorisation",
												"{{authorisation_id}}",
												"status",
												"UNCONFIRMED"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Update PSU data for payment initiation - provide confirmation code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27ff28b6-ce1c-4eb1-91a1-c627e3b31774",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"  pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"confirmationCode\": \"{{authConfirmationCode}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "12. Cancel payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25159afc-be08-4cc6-bc2a-a7332ace984b",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Transcation status is ACSP\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('ACSP');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('status');",
													"    ",
													"});",
													"",
													"const parts = jsonData._links.scaStatus.href.split('/');",
													"const authorisationId = parts[ parts.length - 1 ];",
													"",
													"pm.globals.set(\"cancellation_id\", authorisationId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "13. Authorise in ledgers for payment cancellation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa56eaa7-3202-4cca-8133-c0bbbc1b3ac5",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('cancellation_id'));",
													"});",
													"",
													"const tokenWithoutQuotes = JSON.stringify(jsonData.bearerToken.access_token).replace(/\"/g,\"\");",
													"pm.globals.set(\"ledgersBearerToken\", tokenWithoutQuotes);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/users/loginForConsent?login={{psu_id_single}}&pin={{psu_id_password}}&consentId={{internal_payment_id}}&authorisationId={{cancellation_id}}&opType=CANCEL_PAYMENT",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"users",
												"loginForConsent"
											],
											"query": [
												{
													"key": "login",
													"value": "{{psu_id_single}}"
												},
												{
													"key": "pin",
													"value": "{{psu_id_password}}"
												},
												{
													"key": "consentId",
													"value": "{{internal_payment_id}}"
												},
												{
													"key": "authorisationId",
													"value": "{{cancellation_id}}"
												},
												{
													"key": "opType",
													"value": "CANCEL_PAYMENT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "14. Select SCA method for cancellation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "825c26b6-1c88-4c69-b1bb-9b7cabe8f0bc",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/payments/{{internal_payment_id}}/cancellation-authorisations/{{cancellation_id}}/scaMethods/{{authenticationMethodId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"payments",
												"{{internal_payment_id}}",
												"cancellation-authorisations",
												"{{cancellation_id}}",
												"scaMethods",
												"{{authenticationMethodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "15. Authorise payment cancellation in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19400671-7f23-4e6f-96a9-6ae65c9a4c80",
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.globals.set(\"authorisation_code\", jsonData.authConfirmationCode);",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"const paymentResponse = JSON.stringify(jsonData);",
													"pm.globals.set(\"ledgersPaymentResponse\", paymentResponse);",
													"",
													"pm.test(\"SCA status is unconfirmed\", () => {",
													"   pm.expect(jsonData.scaStatus).to.eq('unconfirmed');",
													"});",
													"",
													"pm.test(\"Auth confirmation code exists\", () => {",
													"   pm.expect(jsonData).to.have.property('authConfirmationCode');",
													"});",
													"",
													"const authConfirmationCode = jsonData.authConfirmationCode;",
													"pm.globals.set(\"authConfirmationCode\", authConfirmationCode);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/payments/{{internal_payment_id}}/cancellation-authorisations/{{cancellation_id}}/authCode?authCode={{tan}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"payments",
												"{{internal_payment_id}}",
												"cancellation-authorisations",
												"{{cancellation_id}}",
												"authCode"
											],
											"query": [
												{
													"key": "authCode",
													"value": "{{tan}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "16. Update cancellation authorisation status to UNCONFIRMED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79a8a9f3-198a-4ca8-b53c-816790fdc5fc",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "de738f3a-2f7c-45ea-b2ee-fd2f206970eb",
												"exec": [
													"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
													"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
													"",
													"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"authenticationMethodId\": \"SMS\",\n    \"authenticationData\": \"{{authConfirmationCode}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/{{internal_payment_id}}/authorisation/{{cancellation_id}}/status/UNCONFIRMED",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"payment",
												"{{internal_payment_id}}",
												"authorisation",
												"{{cancellation_id}}",
												"status",
												"UNCONFIRMED"
											]
										}
									},
									"response": []
								},
								{
									"name": "17. Update PSU data for payment cancellation - provide code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "498eadb2-f04b-406c-9c52-6a5dc307c8af",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"  pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"confirmationCode\": \"{{authConfirmationCode}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{cancellation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{cancellation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "18. Get payment initiation status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae17060d-c9f3-468f-a4a4-0090bff70d66",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Test transaction status\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionStatus');",
													"    pm.expect(jsonData.transactionStatus).to.eql('CANC');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "test data",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"status"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "PIIS",
			"item": [
				{
					"name": "Confirmation by SPI",
					"item": [
						{
							"name": "PIIS Consent REDIRECT - confirmation of authorisation Ledgers",
							"item": [
								{
									"name": "1. Set redirect SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "215f7f38-b020-441a-ac37-9a70c004ed20",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Enable PIIS consent support in ASPSP profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "334a6ab3-fcb3-4b73-ab06-d6415e547789",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"TPP_CONSENT_SUPPORTED\",\n        \"redirectLinkToOnlineBanking\": {\n            \"piisRedirectUrlToAspsp\": \"http://localhost:4200/piis/{redirect-id}/{encrypted-consent-id}\"\n        }\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"authorisationConfirmationRequestMandated\": true,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n        \"aspspNotificationsSupported\": [\n            \"NONE\"\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create PIIS consent in XS2A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d4e9943-c6ee-4c80-9d34-354f0c45bc5d",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"PIIS consent ID exists\", () => {",
													"   pm.expect(jsonData).to.have.property('consentId');",
													"});",
													"",
													"pm.globals.set(\"piis_consent_id\", jsonData.consentId);",
													"",
													"const scaRedirectLink = jsonData._links.scaRedirect.href;",
													"",
													"if (scaRedirectLink !== undefined) {",
													"    var a = scaRedirectLink.split('/');",
													"    a.pop();",
													"    const authorisationId = a.pop();",
													"    pm.globals.set(\"authorisation_id\", authorisationId);",
													"}",
													"",
													"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
													"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
													"pm.globals.set(\"redirect_id\", redirectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"value": "{{psu_id_single}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_single}}\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v2",
												"consents",
												"confirmation-of-funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Get consent response object by redirect id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20013bcc-413c-4255-9e9a-8da4a24fb711",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Authorisation id is present\", () => {",
													"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
													"});",
													"",
													"pm.test(\"Redirect URLs are present\", () => {",
													"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
													"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
													"});",
													"",
													"const authorisationId = jsonData.authorisationId;",
													"pm.test(\"Authorisation id is correct\", () => {",
													"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
													"});",
													"",
													"pm.test(\"Consent id is present\", () => {",
													"    pm.expect(jsonData.consent).to.have.property(\"id\");",
													"});",
													"",
													"pm.globals.set(\"internal_consent_id\", jsonData.consent.id);",
													"pm.globals.set(\"authorisation_id\", authorisationId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8cefcd13-91a4-42eb-8cb9-8923004068e5",
												"exec": [
													"pm.globals.unset(\"internal_consent_id\");",
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/redirect/{{redirect_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v2",
												"piis",
												"consent",
												"redirect",
												"{{redirect_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Authorise in ledgers for consent processing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03e44b1a-b199-4859-a372-060c167be46e",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
													"});",
													"",
													"const tokenWithoutQuotes = JSON.stringify(jsonData.bearerToken.access_token).replace(/\"/g,\"\");",
													"pm.globals.set(\"ledgersBearerToken\", tokenWithoutQuotes);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"type": "text",
												"value": "{{psu_id_none}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/users/loginForConsent?login={{psu_id_single}}&pin={{psu_id_password}}&consentId={{internal_consent_id}}&authorisationId={{authorisation_id}}&opType=CONSENT",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"users",
												"loginForConsent"
											],
											"query": [
												{
													"key": "login",
													"value": "{{psu_id_single}}"
												},
												{
													"key": "pin",
													"value": "{{psu_id_password}}"
												},
												{
													"key": "consentId",
													"value": "{{internal_consent_id}}"
												},
												{
													"key": "authorisationId",
													"value": "{{authorisation_id}}"
												},
												{
													"key": "opType",
													"value": "CONSENT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Start SCA in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e7e2e73-f58b-4071-a62c-d8a3f0fcddac",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"SCA methods exists\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"});",
													"",
													"pm.globals.set(\"authenticationMethodId\", jsonData.scaMethods[0].id);",
													"",
													"pm.test(\"Consent ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('consentId');",
													"    pm.expect(jsonData.consentId).to.eq(pm.globals.get('internal_consent_id'));",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": \"{{internal_consent_id}}\",\n\t\"tppId\": \"{{tpp_id}}\",\n\t\"frequencyPerDay\": 400,\n\t\"access\": {\n    \t\"accounts\": [\"{{iban_single}}\"],\n    \t\"balances\": [\"{{iban_single}}\"],\n    \t\"transactions\": [\"{{iban_single}}\"]\n\t},\n\t\"validUntil\": \"2021-12-31\",\n\t\"recurringIndicator\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"consents",
												"{{internal_consent_id}}",
												"authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Select SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc6c1acc-2f10-4c7a-be5a-1cad8d264d2e",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations/{{authorisation_id}}/scaMethods/{{authenticationMethodId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"consents",
												"{{internal_consent_id}}",
												"authorisations",
												"{{authorisation_id}}",
												"scaMethods",
												"{{authenticationMethodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Authorise consent in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "313111c0-f440-4f6a-951f-e15486dc3787",
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.globals.set(\"authorisation_code\", jsonData.authConfirmationCode);",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"var token = JSON.stringify(jsonData);",
													"pm.globals.set(\"ledgersBearerToken\", token);",
													"",
													"const consentResponse = JSON.stringify(jsonData);",
													"pm.globals.set(\"ledgersConsentResponse\", consentResponse);",
													"",
													"pm.test(\"SCA status is unconfirmed\", () => {",
													"   pm.expect(jsonData.scaStatus).to.eq('unconfirmed');",
													"});",
													"",
													"pm.test(\"Auth confirmation code exists\", () => {",
													"   pm.expect(jsonData).to.have.property('authConfirmationCode');",
													"});",
													"",
													"const authConfirmationCode = jsonData.authConfirmationCode;",
													"pm.globals.set(\"authConfirmationCode\", authConfirmationCode);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations/{{authorisation_id}}/authCode?authCode={{tan}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"consents",
												"{{internal_consent_id}}",
												"authorisations",
												"{{authorisation_id}}",
												"authCode"
											],
											"query": [
												{
													"key": "authCode",
													"value": "{{tan}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Update ASPSP consent data for the given PIIS consent in CMS-PSU-API",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3fd98b2-1773-4a6f-9679-128a2f56e2c5",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5c591d31-0238-4a32-af0d-07a7c0cb6e3b",
												"exec": [
													"const ledgersConsentResponse = pm.globals.get(\"ledgersConsentResponse\");",
													"var utf8string = CryptoJS.enc.Utf8.parse(ledgersConsentResponse);",
													"",
													"pm.globals.set(\"encodedLedgersConsentResponse\", CryptoJS.enc.Base64.stringify(utf8string));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersConsentResponse}}\",\n  \"consentId\": \"{{consent_id}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{piis_consent_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"aspsp-consent-data",
												"consents",
												"{{piis_consent_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Update status of authorisation to UNCONFIRMED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8dc38fe3-d489-435a-ac6c-89e0aebc2bba",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"type": "text",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"authenticationMethodId\": \"SMS\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/UNCONFIRMED",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v2",
												"piis",
												"consent",
												"{{internal_consent_id}}",
												"authorisation",
												"{{authorisation_id}}",
												"status",
												"UNCONFIRMED"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Update PSU Data for consents finalization - provide code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "235170a2-231e-429b-87f2-b75a009ba8a6",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"  pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"confirmationCode\": \"{{authConfirmationCode}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v2",
												"consents",
												"confirmation-of-funds",
												"{{piis_consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Confirmation by XS2A",
					"item": [
						{
							"name": "PIIS Consent REDIRECT - confirmation of authorisation XS2A",
							"item": [
								{
									"name": "1. Set redirect SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31454e15-561c-4564-ab45-821617c4e3bd",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Enable PIIS consent support in ASPSP profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d69e2abc-5972-474c-8cea-b3506e14be7f",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"TPP_CONSENT_SUPPORTED\",\n        \"redirectLinkToOnlineBanking\": {\n            \"piisRedirectUrlToAspsp\": \"http://localhost:4200/piis/{redirect-id}/{encrypted-consent-id}\"\n        }\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"authorisationConfirmationRequestMandated\": true,\n    \t\"authorisationConfirmationCheckByXs2a\": true, \n        \"aspspNotificationsSupported\": [\n            \"NONE\"\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create PIIS consent in XS2A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a6cc135-c0b9-4f62-90c6-0f55b9c9df47",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"PIIS consent ID exists\", () => {",
													"   pm.expect(jsonData).to.have.property('consentId');",
													"});",
													"",
													"pm.globals.set(\"piis_consent_id\", jsonData.consentId);",
													"",
													"const scaRedirectLink = jsonData._links.scaRedirect.href;",
													"",
													"if (scaRedirectLink !== undefined) {",
													"    var a = scaRedirectLink.split('/');",
													"    a.pop();",
													"    const authorisationId = a.pop();",
													"    pm.globals.set(\"authorisation_id\", authorisationId);",
													"}",
													"",
													"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
													"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
													"pm.globals.set(\"redirect_id\", redirectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"value": "{{psu_id_single}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_single}}\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v2",
												"consents",
												"confirmation-of-funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Get consent response object by redirect id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a69a1f37-7e05-4c4e-bf1d-9ccc6ac574fc",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Authorisation id is present\", () => {",
													"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
													"});",
													"",
													"pm.test(\"Redirect URLs are present\", () => {",
													"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
													"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
													"});",
													"",
													"const authorisationId = jsonData.authorisationId;",
													"pm.test(\"Authorisation id is correct\", () => {",
													"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
													"});",
													"",
													"pm.test(\"Consent id is present\", () => {",
													"    pm.expect(jsonData.consent).to.have.property(\"id\");",
													"});",
													"",
													"pm.globals.set(\"internal_consent_id\", jsonData.consent.id);",
													"pm.globals.set(\"authorisation_id\", authorisationId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5bfcdd97-b412-47c1-8071-a7956de3f959",
												"exec": [
													"pm.globals.unset(\"internal_consent_id\");",
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/redirect/{{redirect_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v2",
												"piis",
												"consent",
												"redirect",
												"{{redirect_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Authorise in ledgers for consent processing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64c9a0a4-3523-4174-9844-716aff4a173e",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
													"});",
													"",
													"const tokenWithoutQuotes = JSON.stringify(jsonData.bearerToken.access_token).replace(/\"/g,\"\");",
													"pm.globals.set(\"ledgersBearerToken\", tokenWithoutQuotes);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"type": "text",
												"value": "{{psu_id_none}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/users/loginForConsent?login={{psu_id_single}}&pin={{psu_id_password}}&consentId={{internal_consent_id}}&authorisationId={{authorisation_id}}&opType=CONSENT",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"users",
												"loginForConsent"
											],
											"query": [
												{
													"key": "login",
													"value": "{{psu_id_single}}"
												},
												{
													"key": "pin",
													"value": "{{psu_id_password}}"
												},
												{
													"key": "consentId",
													"value": "{{internal_consent_id}}"
												},
												{
													"key": "authorisationId",
													"value": "{{authorisation_id}}"
												},
												{
													"key": "opType",
													"value": "CONSENT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Start SCA in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "551b31bb-8c7c-4959-9618-6b193c9404b2",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"SCA methods exists\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"});",
													"",
													"pm.globals.set(\"authenticationMethodId\", jsonData.scaMethods[0].id);",
													"",
													"pm.test(\"Consent ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('consentId');",
													"    pm.expect(jsonData.consentId).to.eq(pm.globals.get('internal_consent_id'));",
													"});",
													"",
													"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": \"{{internal_consent_id}}\",\n\t\"tppId\": \"{{tpp_id}}\",\n\t\"frequencyPerDay\": 400,\n\t\"access\": {\n    \t\"accounts\": [\"{{iban_single}}\"],\n    \t\"balances\": [\"{{iban_single}}\"],\n    \t\"transactions\": [\"{{iban_single}}\"]\n\t},\n\t\"validUntil\": \"2021-12-31\",\n\t\"recurringIndicator\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"consents",
												"{{internal_consent_id}}",
												"authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Select SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77689f30-cff7-4d1a-b323-06893966dee6",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations/{{authorisation_id}}/scaMethods/{{authenticationMethodId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"consents",
												"{{internal_consent_id}}",
												"authorisations",
												"{{authorisation_id}}",
												"scaMethods",
												"{{authenticationMethodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Authorise consent in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc8feee8-583c-4b86-ab95-8c72be07a1a7",
												"exec": [
													"const jsonData = pm.response.json();",
													"pm.globals.set(\"authorisation_code\", jsonData.authConfirmationCode);",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"var token = JSON.stringify(jsonData);",
													"pm.globals.set(\"ledgersBearerToken\", token);",
													"",
													"const consentResponse = JSON.stringify(jsonData);",
													"pm.globals.set(\"ledgersConsentResponse\", consentResponse);",
													"",
													"pm.test(\"SCA status is unconfirmed\", () => {",
													"   pm.expect(jsonData.scaStatus).to.eq('unconfirmed');",
													"});",
													"",
													"pm.test(\"Auth confirmation code exists\", () => {",
													"   pm.expect(jsonData).to.have.property('authConfirmationCode');",
													"});",
													"",
													"const authConfirmationCode = jsonData.authConfirmationCode;",
													"pm.globals.set(\"authConfirmationCode\", authConfirmationCode);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations/{{authorisation_id}}/authCode?authCode={{tan}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"consents",
												"{{internal_consent_id}}",
												"authorisations",
												"{{authorisation_id}}",
												"authCode"
											],
											"query": [
												{
													"key": "authCode",
													"value": "{{tan}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Update ASPSP consent data for the given PIIS consent in CMS-PSU-API",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2e3baa9-59ab-4ae8-b1fa-c3828279e91f",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "931adb57-3663-4d42-bea8-333d97adf50f",
												"exec": [
													"const ledgersConsentResponse = pm.globals.get(\"ledgersConsentResponse\");",
													"var utf8string = CryptoJS.enc.Utf8.parse(ledgersConsentResponse);",
													"",
													"pm.globals.set(\"encodedLedgersConsentResponse\", CryptoJS.enc.Base64.stringify(utf8string));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersConsentResponse}}\",\n  \"consentId\": \"{{consent_id}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{piis_consent_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"aspsp-consent-data",
												"consents",
												"{{piis_consent_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Update status of authorisation to UNCONFIRMED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "304d203e-d0a2-4e93-9a50-81a66462b02f",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"type": "text",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"authenticationMethodId\": \"SMS\",\n\t\"authenticationData\": \"{{authConfirmationCode}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/UNCONFIRMED",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v2",
												"piis",
												"consent",
												"{{internal_consent_id}}",
												"authorisation",
												"{{authorisation_id}}",
												"status",
												"UNCONFIRMED"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Update PSU Data for consents finalization - provide code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f9b11b2-9696-4de9-a747-f3ab44233906",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"  pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"confirmationCode\": \"{{authConfirmationCode}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v2",
												"consents",
												"confirmation-of-funds",
												"{{piis_consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Oauth",
			"item": [
				{
					"name": "Consent dedicated OAUTH - confirmation of authorisation Ledgers",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d55139ba-54d4-4d57-aae3-9b5514af0a2a",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set authorisation confirmation check in ASPSP profile settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dcc6adeb-2cea-4f6d-a3be-50eedda97ecb",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"OAUTH\",\n        \"oauthConfigurationUrl\": \"{{protocol}}://{{url_online_banking}}/oauth/authorization-server\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": true,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create AIS consent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6a621fdb-49c0-4fd5-a621-224bca463e6a",
										"exec": [
											"pm.globals.unset(\"consent_id\");",
											"pm.globals.unset(\"redirect_id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f37eef74-5a1c-4b09-bd89-dbba4bd9167f",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"",
											"const scaRedirectLink = jsonData._links.scaRedirect.href;",
											"",
											"if (scaRedirectLink !== undefined) {",
											"    var a = scaRedirectLink.split('/');",
											"    a.pop();",
											"    const authorisationId = a.pop();",
											"    pm.globals.set(\"authorisation_id\", authorisationId);",
											"}",
											"",
											"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"pm.globals.set(\"redirect_id\", redirectId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "date",
										"value": "Sun, 11 Aug 2019 15:02:37 GMT"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "qwac certificate",
										"disabled": true
									},
									{
										"key": "x-request-id",
										"value": "{{x_request_id}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"type": "text",
										"value": "true"
									},
									{
										"key": "TPP-Redirect-URI",
										"type": "text",
										"value": "TPP-Redirect-URI"
									},
									{
										"key": "TPP-Nok-Redirect-URI",
										"type": "text",
										"value": "TPP-Nok-Redirect-URI"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_single}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_single}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_single}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": true,\n      \"validUntil\": \"2021-12-31\"\n    }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								},
								"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
							},
							"response": []
						},
						{
							"name": "4. Get consent response object by redirect ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4588189-5307-40cc-8554-13d262f1a552",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"pm.test(\"Redirect URLs are present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
											"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5fcf5a1f-ec9e-4a3c-aaef-180e3bbe14b3",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Authorise in ledgers for consent processing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26ce5de6-a529-43af-8d03-07613a9037b2",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Bearer token exists\", () => {",
											"   pm.expect(jsonData).to.have.property('bearerToken');",
											"});",
											"",
											"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
											"    pm.expect(jsonData).to.have.property('authorisationId');",
											"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
											"});",
											"",
											"const tokenWithoutQuotes = JSON.stringify(jsonData.bearerToken.access_token).replace(/\"/g,\"\");",
											"pm.globals.set(\"ledgersBearerToken\", tokenWithoutQuotes);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "psu-id",
										"type": "text",
										"value": "{{psu_id_none}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/loginForConsent?login={{psu_id_single}}&pin={{psu_id_password}}&consentId={{internal_consent_id}}&authorisationId={{authorisation_id}}&opType=CONSENT",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"loginForConsent"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_single}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "consentId",
											"value": "{{internal_consent_id}}"
										},
										{
											"key": "authorisationId",
											"value": "{{authorisation_id}}"
										},
										{
											"key": "opType",
											"value": "CONSENT"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Start SCA in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99259629-f725-49b9-83f4-29a1eae0408d",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"SCA methods exists\", () => {",
											"    pm.expect(jsonData).to.have.property('scaMethods');",
											"});",
											"",
											"pm.globals.set(\"authenticationMethodId\", jsonData.scaMethods[0].id);",
											"",
											"pm.test(\"Consent ID matches ID in CMS\", () => {",
											"    pm.expect(jsonData).to.have.property('consentId');",
											"    pm.expect(jsonData.consentId).to.eq(pm.globals.get('internal_consent_id'));",
											"});",
											"",
											"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
											"    pm.expect(jsonData).to.have.property('authorisationId');",
											"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ledgersBearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{internal_consent_id}}\",\n\t\"tppId\": \"{{tpp_id}}\",\n\t\"frequencyPerDay\": 400,\n\t\"access\": {\n    \t\"accounts\": [\"{{iban_single}}\"],\n    \t\"balances\": [\"{{iban_single}}\"],\n    \t\"transactions\": [\"{{iban_single}}\"]\n\t},\n\t\"validUntil\": \"2021-12-31\",\n\t\"recurringIndicator\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"consents",
										"{{internal_consent_id}}",
										"authorisations"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Select SCA method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdea4b33-bd3b-4772-bbef-57143cdc9f92",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ledgersBearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations/{{authorisation_id}}/scaMethods/{{authenticationMethodId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"consents",
										"{{internal_consent_id}}",
										"authorisations",
										"{{authorisation_id}}",
										"scaMethods",
										"{{authenticationMethodId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Authorise consent in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8651b025-8bc5-404b-9357-80eaaa402bdc",
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.globals.set(\"authorisation_code\", jsonData.authConfirmationCode);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Bearer token exists\", () => {",
											"   pm.expect(jsonData).to.have.property('bearerToken');",
											"});",
											"",
											"var token = JSON.stringify(jsonData);",
											"pm.globals.set(\"ledgersBearerToken\", token);",
											"",
											"const consentResponse = JSON.stringify(jsonData);",
											"pm.globals.set(\"ledgersConsentResponse\", consentResponse);",
											"",
											"pm.test(\"SCA status is unconfirmed\", () => {",
											"   pm.expect(jsonData.scaStatus).to.eq('unconfirmed');",
											"});",
											"",
											"pm.test(\"Auth confirmation code exists\", () => {",
											"   pm.expect(jsonData).to.have.property('authConfirmationCode');",
											"});",
											"",
											"const authConfirmationCode = jsonData.authConfirmationCode;",
											"pm.globals.set(\"authConfirmationCode\", authConfirmationCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ledgersBearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations/{{authorisation_id}}/authCode?authCode={{tan}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"consents",
										"{{internal_consent_id}}",
										"authorisations",
										"{{authorisation_id}}",
										"authCode"
									],
									"query": [
										{
											"key": "authCode",
											"value": "{{tan}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update status of authorisation to UNCONFIRMED",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4d97972-62b3-43e5-9689-c4a85a21a2e3",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"authenticationMethodId\": \"SMS\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/UNCONFIRMED",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"status",
										"UNCONFIRMED"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Update PSU Data for consents finalization - provide code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3eb9f13-e577-4334-ab70-172d1c125c29",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"  pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Single payment initiation OAUTH - confirmation of authorisation Ledgers",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ffcae4c0-94dd-4dfa-81ca-fe3c9c118cb2",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set authorisation confirmation check in ASPSP profile settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92e43ea0-eb2c-4f39-b511-46053599282c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"OAUTH\",\n        \"oauthConfigurationUrl\": \"{{protocol}}://{{url_online_banking}}/oauth/authorization-server\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n            \"NONE\"\n        ],\n        \"authorisationConfirmationRequestMandated\": true,\n        \"authorisationConfirmationCheckByXs2a\": false,\n        \"checkUriComplianceToDomainSupported\": false\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Payment initiation request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "694e3dad-ee8a-4b49-8348-8b7192dfbcad",
										"exec": [
											"pm.globals.unset(\"payment_id\");",
											"pm.globals.unset(\"redirect_id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d0d8342a-3ec9-4a0c-96db-40bd85895865",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Payment status is received\", () => {",
											"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
											"});",
											"",
											"pm.globals.set(\"payment_id\", jsonData.paymentId);",
											"",
											"const scaRedirectLink = jsonData._links.scaRedirect.href;",
											"",
											"if (scaRedirectLink !== undefined) {",
											"    var a = scaRedirectLink.split('redirectId=');",
											" ",
											"    const authorisationId = a.pop();",
											"    pm.globals.set(\"authorisation_id\", authorisationId);",
											"}",
											"",
											"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"pm.globals.set(\"redirect_id\", redirectId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "date",
										"value": "Sun, 11 Aug 2019 15:02:37 GMT"
									},
									{
										"key": "x-request-id",
										"value": "{{x_request_id}}"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "TPP-Redirect-URI",
										"type": "text",
										"value": "TPP-Redirect-URI"
									},
									{
										"key": "TPP-Nok-Redirect-URI",
										"type": "text",
										"value": "TPP-Nok-Redirect-URI"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"{{payment_service}}",
										"{{payment_product}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Get payment response object by redirect ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf5ffdab-1ded-431f-a18d-709836dc5bf5",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(jsonData.authorisationId).to.eql(pm.globals.get(\"authorisation_id\"));",
											"});",
											"",
											"const internalPaymentId = jsonData.payment.paymentId;",
											"pm.globals.set(\"internal_payment_id\", internalPaymentId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/redirect/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"redirect",
										"{{authorisation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Authorise in ledgers for payment processing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f712280c-0c5a-4c31-966a-8f4760eccd8f",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Bearer token exists\", () => {",
											"   pm.expect(jsonData).to.have.property('bearerToken');",
											"});",
											"",
											"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
											"    pm.expect(jsonData).to.have.property('authorisationId');",
											"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
											"});",
											"",
											"const tokenWithoutQuotes = JSON.stringify(jsonData.bearerToken.access_token).replace(/\"/g,\"\");",
											"pm.globals.set(\"ledgersBearerToken\", tokenWithoutQuotes);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "psu-id",
										"type": "text",
										"value": "{{psu_id_none}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/loginForConsent?login={{psu_id_single}}&pin={{psu_id_password}}&consentId={{internal_payment_id}}&authorisationId={{authorisation_id}}&opType=PAYMENT",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"loginForConsent"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_single}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "consentId",
											"value": "{{internal_payment_id}}"
										},
										{
											"key": "authorisationId",
											"value": "{{authorisation_id}}"
										},
										{
											"key": "opType",
											"value": "PAYMENT"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Initiate payment in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a7ff414c-0dc7-47fc-9a87-b89b2d4bf29a",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"SCA methods exists\", () => {",
											"    pm.expect(jsonData).to.have.property('scaMethods');",
											"});",
											"",
											"pm.globals.set(\"authenticationMethodId\", jsonData.scaMethods[0].id);",
											"",
											"pm.test(\"Payment ID matches ID in CMS\", () => {",
											"    pm.expect(jsonData).to.have.property('paymentId');",
											"    pm.expect(jsonData.paymentId).to.eq(pm.globals.get('internal_payment_id'));",
											"});",
											"",
											"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
											"    pm.expect(jsonData).to.have.property('authorisationId');",
											"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ledgersBearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"debtorAccount\": {\n        \"iban\": \"{{iban_single}}\"\n    },\n    \"targets\": [\n        {\n            \"chargeBearerTO\": \"CRED\",\n            \"creditorAccount\": {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            },\n            \"creditorAddress\": {\n                \"buildingNumber\": \"56\",\n                \"city\": \"Nürnberg\",\n                \"country\": \"DE\",\n                \"postalCode\": \"90543\",\n                \"street\": \"WBG Straße\"\n            },\n            \"creditorAgent\": \"AAAADEBBXXX\",\n            \"creditorName\": \"WBG\",\n            \"currencyOfTransfer\": \"EUR\",\n            \"endToEndIdentification\": \"WBG-123456789\",\n            \"instructedAmount\": {\n                \"amount\": 0.01,\n                \"currency\": \"EUR\"\n            },\n            \"paymentId\": \"{{internal_payment_id}}\",\n            \"purposeCode\": \"BKDF\",\n            \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n        }\n    ],\n    \"paymentProduct\": \"sepa-credit-transfers\",\n    \"paymentId\": \"{{internal_payment_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/payments/?paymentType=SINGLE",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"payments",
										""
									],
									"query": [
										{
											"key": "paymentType",
											"value": "SINGLE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Select SCA method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a24d4c58-983b-43f4-9fe9-5270cf5415d6",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ledgersBearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/payments/{{internal_payment_id}}/authorisations/{{authorisation_id}}/scaMethods/{{authenticationMethodId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"payments",
										"{{internal_payment_id}}",
										"authorisations",
										"{{authorisation_id}}",
										"scaMethods",
										"{{authenticationMethodId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Authorise payment in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19faa1be-fcb0-4a36-afb7-7e92efc74ca2",
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.globals.set(\"authorisation_code\", jsonData.authConfirmationCode);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Bearer token exists\", () => {",
											"   pm.expect(jsonData).to.have.property('bearerToken');",
											"});",
											"",
											"pm.test(\"Access_token value exists\", () => {",
											"    pm.expect(jsonData.bearerToken).to.have.property('access_token');",
											"    ",
											"    var access_token = jsonData.bearerToken.access_token;",
											"",
											"    if (access_token === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.globals.set(\"access_token\", jsonData.bearerToken.access_token);",
											"",
											"const paymentResponse = JSON.stringify(jsonData);",
											"pm.globals.set(\"ledgersPaymentResponse\", paymentResponse);",
											"",
											"pm.test(\"SCA status is unconfirmed\", () => {",
											"   pm.expect(jsonData.scaStatus).to.eq('unconfirmed');",
											"});",
											"",
											"pm.test(\"Auth confirmation code exists\", () => {",
											"   pm.expect(jsonData).to.have.property('authConfirmationCode');",
											"});",
											"",
											"const authConfirmationCode = jsonData.authConfirmationCode;",
											"pm.globals.set(\"authConfirmationCode\", authConfirmationCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ledgersBearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/payments/{{internal_payment_id}}/authorisations/{{authorisation_id}}/authCode?authCode={{tan}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"payments",
										"{{internal_payment_id}}",
										"authorisations",
										"{{authorisation_id}}",
										"authCode"
									],
									"query": [
										{
											"key": "authCode",
											"value": "{{tan}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update status of authorisation to UNCONFIRMED",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e335c4bd-ece5-43cc-bde9-2500c4459793",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"authenticationMethodId\": \"SMS\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/{{internal_payment_id}}/authorisation/{{authorisation_id}}/status/UNCONFIRMED",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"{{internal_payment_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"status",
										"UNCONFIRMED"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Update PSU data for payment initiation - provide confirmation code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8981c747-95b3-4c35-b13d-6c741a659969",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"  pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"{{payment_service}}",
										"{{payment_product}}",
										"{{payment_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PIIS Consent OAUTH - confirmation of authorisation Ledgers",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "269e5c20-db68-4623-8370-1501e6b944fe",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Enable PIIS consent support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77c6401f-df1b-41f9-83a2-f6cea56250c5",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"TPP_CONSENT_SUPPORTED\",\n        \"redirectLinkToOnlineBanking\": {\n            \"piisRedirectUrlToAspsp\": \"http://localhost:4200/piis/{redirect-id}/{encrypted-consent-id}\"\n        }\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"OAUTH\",\n        \"oauthConfigurationUrl\": \"{{protocol}}://{{url_online_banking}}/oauth/authorization-server\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"authorisationConfirmationRequestMandated\": true,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n        \"aspspNotificationsSupported\": [\n            \"NONE\"\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create PIIS consent in XS2A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "182ffc7d-fa52-440f-88a3-992aeffe536a",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"PIIS consent ID exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.globals.set(\"piis_consent_id\", jsonData.consentId);",
											"",
											"const scaRedirectLink = jsonData._links.scaRedirect.href;",
											"",
											"if (scaRedirectLink !== undefined) {",
											"    var a = scaRedirectLink.split('/');",
											"    a.pop();",
											"    const authorisationId = a.pop();",
											"    pm.globals.set(\"authorisation_id\", authorisationId);",
											"}",
											"",
											"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"pm.globals.set(\"redirect_id\", redirectId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "psu-id",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"value": "true",
										"type": "text"
									},
									{
										"key": "TPP-Redirect-URI",
										"value": "TPP-Redirect-URI",
										"type": "text"
									},
									{
										"key": "TPP-Nok-Redirect-URI",
										"value": "TPP-Nok-Redirect-URI",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_single}}\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v2",
										"consents",
										"confirmation-of-funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462feac4-cbad-4fd5-aa80-7b2ef5e72417",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"pm.test(\"Redirect URLs are present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
											"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.consent).to.have.property(\"id\");",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.consent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "51da38a3-f971-4e5f-8d44-b8e6d1ffa1a8",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v2",
										"piis",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Authorise in ledgers for consent processing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0fb4497-368e-4f00-9dab-f2beabdeeaf2",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Bearer token exists\", () => {",
											"   pm.expect(jsonData).to.have.property('bearerToken');",
											"});",
											"",
											"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
											"    pm.expect(jsonData).to.have.property('authorisationId');",
											"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
											"});",
											"",
											"const tokenWithoutQuotes = JSON.stringify(jsonData.bearerToken.access_token).replace(/\"/g,\"\");",
											"pm.globals.set(\"ledgersBearerToken\", tokenWithoutQuotes);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "psu-id",
										"type": "text",
										"value": "{{psu_id_none}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/loginForConsent?login={{psu_id_single}}&pin={{psu_id_password}}&consentId={{internal_consent_id}}&authorisationId={{authorisation_id}}&opType=CONSENT",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"loginForConsent"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_single}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "consentId",
											"value": "{{internal_consent_id}}"
										},
										{
											"key": "authorisationId",
											"value": "{{authorisation_id}}"
										},
										{
											"key": "opType",
											"value": "CONSENT"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Start SCA in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3061889-fff2-46bd-b5aa-7b8f9b1f40f9",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"SCA methods exists\", () => {",
											"    pm.expect(jsonData).to.have.property('scaMethods');",
											"});",
											"",
											"pm.globals.set(\"authenticationMethodId\", jsonData.scaMethods[0].id);",
											"",
											"pm.test(\"Consent ID matches ID in CMS\", () => {",
											"    pm.expect(jsonData).to.have.property('consentId');",
											"    pm.expect(jsonData.consentId).to.eq(pm.globals.get('internal_consent_id'));",
											"});",
											"",
											"pm.test(\"Authorisation ID matches ID in CMS\", () => {",
											"    pm.expect(jsonData).to.have.property('authorisationId');",
											"    pm.expect(jsonData.authorisationId).to.eq(pm.globals.get('authorisation_id'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ledgersBearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{internal_consent_id}}\",\n\t\"tppId\": \"{{tpp_id}}\",\n\t\"frequencyPerDay\": 400,\n\t\"access\": {\n    \t\"accounts\": [\"{{iban_single}}\"],\n    \t\"balances\": [\"{{iban_single}}\"],\n    \t\"transactions\": [\"{{iban_single}}\"]\n\t},\n\t\"validUntil\": \"2021-12-31\",\n\t\"recurringIndicator\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"consents",
										"{{internal_consent_id}}",
										"authorisations"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Select SCA method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9652764-0555-4efa-baa9-16a0afc3c34e",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ledgersBearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations/{{authorisation_id}}/scaMethods/{{authenticationMethodId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"consents",
										"{{internal_consent_id}}",
										"authorisations",
										"{{authorisation_id}}",
										"scaMethods",
										"{{authenticationMethodId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Authorise consent in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af7c970f-fe99-42a4-855c-e017e4a14086",
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.globals.set(\"authorisation_code\", jsonData.authConfirmationCode);",
											"",
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Bearer token exists\", () => {",
											"   pm.expect(jsonData).to.have.property('bearerToken');",
											"});",
											"",
											"var token = JSON.stringify(jsonData);",
											"pm.globals.set(\"ledgersBearerToken\", token);",
											"",
											"const consentResponse = JSON.stringify(jsonData);",
											"pm.globals.set(\"ledgersConsentResponse\", consentResponse);",
											"",
											"pm.test(\"SCA status is unconfirmed\", () => {",
											"   pm.expect(jsonData.scaStatus).to.eq('unconfirmed');",
											"});",
											"",
											"pm.test(\"Auth confirmation code exists\", () => {",
											"   pm.expect(jsonData).to.have.property('authConfirmationCode');",
											"});",
											"",
											"const authConfirmationCode = jsonData.authConfirmationCode;",
											"pm.globals.set(\"authConfirmationCode\", authConfirmationCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ledgersBearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/consents/{{internal_consent_id}}/authorisations/{{authorisation_id}}/authCode?authCode={{tan}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"consents",
										"{{internal_consent_id}}",
										"authorisations",
										"{{authorisation_id}}",
										"authCode"
									],
									"query": [
										{
											"key": "authCode",
											"value": "{{tan}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Update status of authorisation to UNCONFIRMED",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "201d84dc-44b0-4e20-b81d-02736246d792",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"authenticationMethodId\": \"SMS\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/UNCONFIRMED",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v2",
										"piis",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"status",
										"UNCONFIRMED"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Update PSU Data for consents finalization - provide code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2f9b2e0-b3af-43b4-88be-5cc3e1b8fa80",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"  pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v2",
										"consents",
										"confirmation-of-funds",
										"{{piis_consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9ec4fa76-bb88-4783-9819-ae1bfa4e3b59",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "6e04e2f2-6e05-4f74-8350-e68b7eebd3c4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}