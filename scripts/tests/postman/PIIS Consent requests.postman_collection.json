{
	"info": {
		"_postman_id": "02c24d56-f95d-4d57-8c1f-2c492aa7eb94",
		"name": "PIIS Consent requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "v1",
			"item": [
				{
					"name": "Errorful requests",
					"item": [
						{
							"name": "wrong TPP in certificate",
							"item": [
								{
									"name": "1. Enable PIIS consent support in ASPSP profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a0f8c02-c823-4de9-b470-58d79a02d347",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"ASPSP_CONSENT_SUPPORTED\"\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Create PIIS consent request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa9dd849-dcac-492a-a714-f503a7dfe0ad",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"consentId is exist\", () => {",
													"    ",
													"    pm.expect(jsonData).to.have.property('consentId');",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3330d2bc-50f5-4228-94a6-ade894d1b85a",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"type": "text",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "PSU-IP-Address",
												"type": "text",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"type": "text",
												"value": "{{x_request_id}}"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"type": "text",
												"value": "true"
											},
											{
												"key": "TPP-Redirect-URI",
												"type": "text",
												"value": "TPP-Redirect-URI"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"type": "text",
												"value": "TPP-Nok-Redirect-URI"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account\": {\n    \"aspspAccountId\": \"125-DEDE89370400440532013000-EUR\",\n    \"currency\": \"EUR\",\n    \"iban\": \"{{iban_multiple}}\"\n  },\n  \"cardExpiryDate\": \"2020-12-31\",\n  \"cardInformation\": \"MyMerchant Loyalty Card\",\n  \"cardNumber\": 1234567891234,\n  \"registrationInformation\": \"Your contract Number 1234 with MyMerchant is completed with the registration with your bank.\",\n  \"tppAuthorisationNumber\": \"PSDDE-FAKENCA-87B2AC\",\n  \"validUntil\": \"2020-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"aspsp-api",
												"v1",
												"piis",
												"consents",
												""
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "3. Fund confirmation request WRONG certificate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a106b3a-6ccb-4ceb-9f45-4189ebfdc9a2",
												"exec": [
													"pm.test('Status code is 400', () => {",
													"   pm.response.to.have.status(400);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('TppMessages and error are exist', () => {",
													"    ",
													"    pm.expect(jsonData).to.have.property('tppMessages');",
													"    ",
													"    var error = jsonData.tppMessages[0];",
													"       ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
													"    pm.expect(error.text).to.eql('The Consent-ID cannot be matched by the ASPSP relative to the TPP');",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "tpp-qwac-certificate",
												"value": "{{wrong-certificate}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account\": {\n\t\t\"currency\": \"EUR\",\n\t    \"iban\": \"{{iban_multiple}}\"\n},\n  \"cardNumber\": \"12345\",\n  \"instructedAmount\": {\n    \"amount\": \"160.00\",\n    \"currency\": \"EUR\"\n  },\n  \"payee\": \"Check24\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/funds-confirmations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"funds-confirmations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Several TPPs for one PSU account",
					"item": [
						{
							"name": "Preparations",
							"item": [
								{
									"name": "1. Enable PIIS consent support in ASPSP profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "448aa8b7-6bef-4eb0-88d8-a2f350deeee8",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"ASPSP_CONSENT_SUPPORTED\"\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Authorise in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e89444b-d8dc-4245-8854-6fc5d5bcda8a",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Bearer token exists\", () => {",
													"   pm.expect(jsonData).to.have.property('bearerToken');",
													"});",
													"",
													"var tokenWithoutQuotes = JSON.stringify(jsonData.bearerToken.access_token).replace(/\"/g,\"\")",
													"",
													"pm.globals.set(\"ledgersBearerToken\", tokenWithoutQuotes);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"type": "text",
												"value": "{{psu_id_none}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/users/login?login={{psu_id_none}}&pin={{psu_id_password}}&role=CUSTOMER",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"users",
												"login"
											],
											"query": [
												{
													"key": "login",
													"value": "{{psu_id_none}}"
												},
												{
													"key": "pin",
													"value": "{{psu_id_password}}"
												},
												{
													"key": "role",
													"value": "CUSTOMER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Execute /me request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0265c34a-ee49-49ed-8777-282f94aafe4d",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"User ID exists\", () => {",
													"   pm.expect(jsonData).to.have.property('id');",
													"});",
													"",
													"pm.globals.set(\"userId\", jsonData.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/users/me",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "TPP_1",
							"item": [
								{
									"name": "4. Create PIIS consent in CMS-ASPSP-API",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a92fcc1-ebf8-4d89-acd9-3a42c83b5ecd",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"PIIS consent ID exists\", () => {",
													"   pm.expect(jsonData).to.have.property('consentId');",
													"});",
													"",
													"pm.globals.set(\"piis_consent_id\", jsonData.consentId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"value": "{{psu_id_none}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"tppAuthorisationNumber\": \"PSDDE-FAKENCA-87B2AC\",\n  \"validUntil\": \"2020-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"aspsp-api",
												"v1",
												"piis",
												"consents",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Create PIIS consent in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46ec6433-60ca-4c8e-ab3c-825fb38d4037",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"SCA status exists\", () => {",
													"   pm.expect(jsonData).to.have.property('scaStatus');",
													"});",
													"",
													"pm.globals.set(\"ledgersResponse\", JSON.stringify(jsonData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [\n         \"{{iban_none}}\"\n    ]\n  },\n  \"frequencyPerDay\": 4,\n  \"tppId\": \"PSDDE-FAKENCA-87B2AC\",\n  \"userId\": \"{{userId}}\",\n  \"validUntil\": \"2020-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/consents/piis",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"consents",
												"piis"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Update ASPSP consent data for the given PIIS consent in CMS-PSU-API",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33f7234d-e2c3-4074-85b7-b531975eb2fe",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "28ef2b9a-f1db-4a25-9fcd-3307179dfca9",
												"exec": [
													"var ledgersResponse = pm.globals.get(\"ledgersResponse\");",
													"var utf8string = CryptoJS.enc.Utf8.parse(ledgersResponse);",
													"",
													"pm.globals.set(\"encodedLedgersResponse\", CryptoJS.enc.Base64.stringify(utf8string));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersResponse}}\",\n  \"consentId\": \"{{piis_consent_id}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{piis_consent_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"aspsp-consent-data",
												"consents",
												"{{piis_consent_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Fund confirmation request in xs2a",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1988144-abe1-4c07-9a02-65843057e038",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"fundsAvailable is present\", () => {",
													"    pm.expect(jsonData).to.have.property('fundsAvailable');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "TPP-qwac-Certificate",
												"value": "-----BEGIN CERTIFICATE-----MIIFJzCCAw+gAwIBAgIETxsR7TANBgkqhkiG9w0BAQsFADB4MQswCQYDVQQGEwJERTEQMA4GA1UECAwHQkFWQVJJQTESMBAGA1UEBwwJTnVyZW1iZXJnMSIwIAYDVQQKDBlUcnVzdCBTZXJ2aWNlIFByb3ZpZGVyIEFHMR8wHQYDVQQLDBZJbmZvcm1hdGlvbiBUZWNobm9sb2d5MB4XDTIwMDExMTEwNDM1M1oXDTIxMDExMDAwMDAwMFowgdgxITAfBgNVBAoMGEZpY3Rpb25hbCBDb3Jwb3JhdGlvbiBBRzEVMBMGA1UEAwwMWFMyQSBTYW5kYm94MSUwIwYKCZImiZPyLGQBGRYVcHVibGljLmNvcnBvcmF0aW9uLmRlMR8wHQYDVQQLDBZJbmZvcm1hdGlvbiBUZWNobm9sb2d5MRAwDgYDVQQGEwdHZXJtYW55MQ8wDQYDVQQIDAZCYXllcm4xEjAQBgNVBAcMCU51cmVtYmVyZzEdMBsGA1UEYQwUUFNEREUtRkFLRU5DQS04N0IyQUMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCRhx6LCOvlHYtld1Bifsqdku4d2SASNqj9ZptbgL6Lf+1WhDxgeUGbHyjN/AdsGkjzY0TUiYV77g/EgcIXuHPKKogN6Ad9Cz4MzIVsQCiZmdk04M78j5l+y7gtqrmV+4h+sGdKFLMEv/yCNb1ahci26CktnzyKQnjhkb7ijIEAWMI83sX1Yo8F5oRPj0XFMr2k4xa8tkqYzt7P3ChxS3kR57lvptAeNNxMpHWhRp0DSxKWhAbxHt7R0FG6Qs8pEuEcyxh/FBK9YPQtEgYbGD91UoB8k1UejKhWJs6+ZNz47gUPylGx2Bh0EczpMwty207KM9YBl1RvZu5ElZzX4V+rAgMBAAGjWDBWMFQGCCsGAQUFBwEDBEgwRgYGBACBmCcCMDwwEzARBgcEAIGYJwECDAZQU1BfUEkMGVRydXN0IFNlcnZpY2UgUHJvdmlkZXIgQUcMCkRFLUZBS0VOQ0EwDQYJKoZIhvcNAQELBQADggIBAIRLwIiRSOc7F4FBn07YVmFwTw/HnFWMkdoDieMHyyioKdJGaOHIRzodw1WMjDl6V6A4G/V3U+nsGG2ra0fFXujoc1YMGEI0Mzrt0VSYwWPS18svBhp31UmegeQIRukXugGKOeWgBnh3DYvNuCbJfKDAUFL3nej75JRZWAzAklb/RaK50iedOrkUEts2K6qaQvygEMW6ytn+RmeqTXwin1g7L2qhBpdCGv/S/PufOW9BZfW4KmmiA9SjQhLQclZWY8DqUoOZUwFEaTgjhd4KZxg7ZvnyPE7Jh0GJMGFsibMEovkltr3ZZyffCDHe9h81Ar611dXKuzgZDu8ejs3v/PIvBzL5GjAvF5N5mSy8YBB91DvGJeJsh9rXi9cwj9qpTA4Ufn6hJiv3a2AAw9xtsa7z/btuEuGPr6G+r385ckcqbOKFqEXwnEVNt65EWhqBPFqm4oU5qVfMLZJ5AJVDkbRGu7lq7HZ/N4MN3a6HQxBk1Mpa6Ap7Tz/7MWbNE+0cXlGOUVZ7+KjasbnqQGRmCvkJK4Bt+fnXBSeKQPDcfI9VLZ1frOM0GcR6NqD/zbrmm1n9JWUxIvOHtylEgNEp4C8lP3YA3YUjRX9WCT41IczMcNbmaj/i0jiiaSFRTXMtKB0iPbD60SJeHI1zeFMTA4EDItb0S70eR23Op5/smJPy-----END CERTIFICATE-----",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"instructedAmount\": {\n    \"amount\": \"100.00\",\n    \"currency\": \"EUR\"\n  },\n  \"payee\": \"Check24\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/funds-confirmations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"funds-confirmations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "TPP_2",
							"item": [
								{
									"name": "8. Create PIIS consent in CMS-ASPSP-API",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f6edf49-5abd-48c6-822a-b847d52abc81",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"PIIS consent ID exists\", () => {",
													"   pm.expect(jsonData).to.have.property('consentId');",
													"});",
													"",
													"pm.globals.set(\"piis_consent_id\", jsonData.consentId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"type": "text",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"tppAuthorisationNumber\": \"PSDDE-FAKENCA-87B2AD\",\n  \"validUntil\": \"2020-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"aspsp-api",
												"v1",
												"piis",
												"consents",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Create PIIS consent in ledgers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2941823d-4350-4308-b741-0cb1cae49b7e",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"SCA status exists\", () => {",
													"   pm.expect(jsonData).to.have.property('scaStatus');",
													"});",
													"",
													"pm.globals.set(\"ledgersResponse\", JSON.stringify(jsonData));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ledgersBearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [\n         \"{{iban_none}}\"\n    ]\n  },\n  \"frequencyPerDay\": 4,\n  \"tppId\": \"PSDDE-FAKENCA-87B2AD\",\n  \"userId\": \"{{userId}}\",\n  \"validUntil\": \"2020-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_ledgers}}/consents/piis",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_ledgers}}"
											],
											"path": [
												"consents",
												"piis"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Update ASPSP consent data for the given PIIS consent in CMS-PSU-API",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a08d958e-5837-4fda-ad56-3f1fd5b68e43",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "72502bae-4720-44b3-a947-4a17b95142fc",
												"exec": [
													"var ledgersResponse = pm.globals.get(\"ledgersResponse\");",
													"var utf8string = CryptoJS.enc.Utf8.parse(ledgersResponse);",
													"",
													"pm.globals.set(\"encodedLedgersResponse\", CryptoJS.enc.Base64.stringify(utf8string));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersResponse}}\",\n  \"consentId\": \"{{piis_consent_id}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{piis_consent_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"aspsp-consent-data",
												"consents",
												"{{piis_consent_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Fund confirmation request in xs2a",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61845b71-57b3-4e8e-bba7-1511f3487c7a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"fundsAvailable is present\", () => {",
													"    pm.expect(jsonData).to.have.property('fundsAvailable');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "TPP-QWAC-CERTIFICATE",
												"value": "-----BEGIN CERTIFICATE-----MIIFJzCCAw+gAwIBAgIEMiq6iTANBgkqhkiG9w0BAQsFADB4MQswCQYDVQQGEwJERTEQMA4GA1UECAwHQkFWQVJJQTESMBAGA1UEBwwJTnVyZW1iZXJnMSIwIAYDVQQKDBlUcnVzdCBTZXJ2aWNlIFByb3ZpZGVyIEFHMR8wHQYDVQQLDBZJbmZvcm1hdGlvbiBUZWNobm9sb2d5MB4XDTIwMDExMTEwNDQzN1oXDTIxMDExMDAwMDAwMFowgdgxITAfBgNVBAoMGEZpY3Rpb25hbCBDb3Jwb3JhdGlvbiBBRzEVMBMGA1UEAwwMWFMyQSBTYW5kYm94MSUwIwYKCZImiZPyLGQBGRYVcHVibGljLmNvcnBvcmF0aW9uLmRlMR8wHQYDVQQLDBZJbmZvcm1hdGlvbiBUZWNobm9sb2d5MRAwDgYDVQQGEwdHZXJtYW55MQ8wDQYDVQQIDAZCYXllcm4xEjAQBgNVBAcMCU51cmVtYmVyZzEdMBsGA1UEYQwUUFNEREUtRkFLRU5DQS04N0IyQUQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCyvyHjlApfVSmSTPeCij9WwVWXPV/lvK7KqWB325zLokQWtcGEt+BKeN00G2i5b4jWyhJgMn40FqnfWGUkSl70q5cgjztm9uoNZ514rEzbM0hI6LyL3KiLJ0gOa1zhvTuh9DrcgSfaJ1/Damdl1CoHHuoqwC5OuIDU/ygR6SIfMabMbXMy7N8piBo3SH4UGEIvadmMH7FghMtbNbVqiVe3hzOj2v2P3emKRJcOhQhiXUGdMxWjBvdmlegBxuhymRRVW2SxjerGoLbwLC6WhKIYaEXeUTqdyazPTVbkdQryEiVdEdXak//rJC6NAgBnBw9N6bF+PtrZnOSuZ1bp19XjAgMBAAGjWDBWMFQGCCsGAQUFBwEDBEgwRgYGBACBmCcCMDwwEzARBgcEAIGYJwECDAZQU1BfUEkMGVRydXN0IFNlcnZpY2UgUHJvdmlkZXIgQUcMCkRFLUZBS0VOQ0EwDQYJKoZIhvcNAQELBQADggIBABXq8wHPveWnieMFjchftwizQmSoRA5ph+sV9alLVgP5LjkF9hpTWzDdZyW+n3fOmK187ngYgokel6YsxPrq+tO/1TANv9nzzLfcfIepcFgoivdYoIKuK6gpexaLoSUJMffp6Xwksb8SmvZxsgzUUl9LqJ/HxTWvPRQ6RchRRQhUbj7CDB1Jay6hnv5AY4ns8bdkYsv7BLpNlLeUDJyMp5l0SnT5QiyrCcac2vtcFI70nGyd8RRskWt+nm7jB39e0jo5tCrpmtDmfV+KWyhS8peYoPRlNZEY9NfD8ko7aemCwl0SuGVtWBKVGXDJ1/GaavzZZc1dzAQWILb+8wVvM7L5cFGgqgHpSHdja9TsNAIGnLlMU736rbvFbYzPsCHdyrXPMPBPVRvgVvQBpBUjPzTE2GJ8YzLLGrkZMeDDx+/nJ1Ifl56/NMlHrefmZutYozyoFlkO63NMK5eSic525+1baHwNQ/6HSTYyRnW2EExYyI7BuJze4lf/GxijzKyIa9IbYpU6y6epvRJU3COTMiFoW5mzpxkqLE1wQ7wAl6UxIqUV/JB8xpKKGYABeld4/Gbu8G5T1Pe1uNw18ZRXu8CsWO9MZp5BT9f/inadx2Sz4n7oH1Jyf/D21wDZKBXPlFhLDdqjRaz0kv+xs1wbfEqk84xrwiX3QhjZZym8Sk7T-----END CERTIFICATE-----",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"instructedAmount\": {\n    \"amount\": \"100.00\",\n    \"currency\": \"EUR\"\n  },\n  \"payee\": \"Check24\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/funds-confirmations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"funds-confirmations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PIIS Consent - Multitenancy support",
					"item": [
						{
							"name": "1. Enable PIIS consent support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68eaf98c-6e77-466d-a3f6-dfff0ed51a6d",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"ASPSP_CONSENT_SUPPORTED\"\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create PIIS consent in CMS-ASPSP-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bed3f864-6ce1-4269-ba8a-78e6ef5ea366",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"PIIS consent ID exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.globals.set(\"piis_consent_id\", jsonData.consentId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "psu-id",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Instance-ID",
										"value": "bank1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"tppAuthorisationNumber\": \"PSDDE-FAKENCA-87B2AC\",\n  \"validUntil\": \"2020-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"piis",
										"consents",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Authorise in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19b0bfeb-262f-43a1-b116-db168d41c215",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Bearer token exists\", () => {",
											"   pm.expect(jsonData).to.have.property('bearerToken');",
											"});",
											"",
											"var tokenWithoutQuotes = JSON.stringify(jsonData.bearerToken.access_token).replace(/\"/g,\"\")",
											"",
											"pm.globals.set(\"ledgersBearerToken\", tokenWithoutQuotes);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "psu-id",
										"type": "text",
										"value": "{{psu_id_none}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/login?login={{psu_id_none}}&pin={{psu_id_password}}&role=CUSTOMER",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"login"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_none}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "role",
											"value": "CUSTOMER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Execute /me request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b29f1194-90e1-4642-a32d-290c32f6bca1",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"User ID exists\", () => {",
											"   pm.expect(jsonData).to.have.property('id');",
											"});",
											"",
											"pm.globals.set(\"userId\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ledgersBearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/me",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Create PIIS consent in ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c7d58ca-5ea0-4847-acbb-94355fbf1765",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"SCA status exists\", () => {",
											"   pm.expect(jsonData).to.have.property('scaStatus');",
											"});",
											"",
											"pm.globals.set(\"ledgersResponse\", JSON.stringify(jsonData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ledgersBearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [\n         \"{{iban_none}}\"\n    ]\n  },\n  \"frequencyPerDay\": 4,\n  \"tppId\": \"PSDDE-FAKENCA-87B2AC\",\n  \"userId\": \"{{userId}}\",\n  \"validUntil\": \"2020-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/consents/piis",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"consents",
										"piis"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Update ASPSP consent data for the given PIIS consent in CMS-PSU-API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec5dc23b-6f37-4d28-9f23-a09fe75fd2ee",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed3fc721-dcd0-4b7a-a5d5-55fd96c3ee2e",
										"exec": [
											"var ledgersResponse = pm.globals.get(\"ledgersResponse\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersResponse);",
											"",
											"pm.globals.set(\"encodedLedgersResponse\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Instance-ID",
										"value": "bank1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersResponse}}\",\n  \"consentId\": \"{{piis_consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{piis_consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{piis_consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Fund confirmation request in xs2a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9731bc30-ea0a-4863-9576-e41af3d08973",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"fundsAvailable is present\", () => {",
											"    pm.expect(jsonData).to.have.property('fundsAvailable');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Instance-ID",
										"value": "bank1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"instructedAmount\": {\n    \"amount\": \"100.00\",\n    \"currency\": \"EUR\"\n  },\n  \"payee\": \"Check24\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/funds-confirmations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"funds-confirmations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "1. Enable PIIS consent support in ASPSP profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "436f3b72-aac1-4967-83b2-f1e80ea428e4",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"ASPSP_CONSENT_SUPPORTED\"\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_aspsp_profile}}"
							],
							"path": [
								"api",
								"v1",
								"aspsp-profile",
								"for-debug",
								"aspsp-settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create PIIS consent in CMS-ASPSP-API",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24feb551-505f-4cb4-b8cb-82c7a025f91c",
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"PIIS consent ID exists\", () => {",
									"   pm.expect(jsonData).to.have.property('consentId');",
									"});",
									"",
									"pm.globals.set(\"piis_consent_id\", jsonData.consentId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "psu-id",
								"value": "{{psu_id_none}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"tppAuthorisationNumber\": \"PSDDE-FAKENCA-87B2AC\",\n  \"validUntil\": \"2020-10-10\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_cms}}"
							],
							"path": [
								"aspsp-api",
								"v1",
								"piis",
								"consents",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Authorise in ledgers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "524e6a07-423d-4090-b4f5-5d1b30bb66ab",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Bearer token exists\", () => {",
									"   pm.expect(jsonData).to.have.property('bearerToken');",
									"});",
									"",
									"var tokenWithoutQuotes = JSON.stringify(jsonData.bearerToken.access_token).replace(/\"/g,\"\")",
									"",
									"pm.globals.set(\"ledgersBearerToken\", tokenWithoutQuotes);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "psu-id",
								"type": "text",
								"value": "{{psu_id_none}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url_ledgers}}/users/login?login={{psu_id_none}}&pin={{psu_id_password}}&role=CUSTOMER",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_ledgers}}"
							],
							"path": [
								"users",
								"login"
							],
							"query": [
								{
									"key": "login",
									"value": "{{psu_id_none}}"
								},
								{
									"key": "pin",
									"value": "{{psu_id_password}}"
								},
								{
									"key": "role",
									"value": "CUSTOMER"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Execute /me request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f34add1c-0938-463a-b497-a71f8c033b54",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"User ID exists\", () => {",
									"   pm.expect(jsonData).to.have.property('id');",
									"});",
									"",
									"pm.globals.set(\"userId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ledgersBearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{url_ledgers}}/users/me",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_ledgers}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Create PIIS consent in ledgers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66d031cf-6fcf-4f94-a640-dad84cdd4bba",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"SCA status exists\", () => {",
									"   pm.expect(jsonData).to.have.property('scaStatus');",
									"});",
									"",
									"pm.globals.set(\"ledgersResponse\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ledgersBearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"access\": {\n    \"accounts\": [\n         \"{{iban_none}}\"\n    ]\n  },\n  \"frequencyPerDay\": 4,\n  \"tppId\": \"PSDDE-FAKENCA-87B2AC\",\n  \"userId\": \"{{userId}}\",\n  \"validUntil\": \"2020-10-10\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url_ledgers}}/consents/piis",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_ledgers}}"
							],
							"path": [
								"consents",
								"piis"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Update ASPSP consent data for the given PIIS consent in CMS-PSU-API Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2f8dfc0-a68c-4186-9881-fa822145e80b",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7faf3a3a-1be9-485f-ac76-a80e9f3cda50",
								"exec": [
									"var ledgersResponse = pm.globals.get(\"ledgersResponse\");",
									"var utf8string = CryptoJS.enc.Utf8.parse(ledgersResponse);",
									"",
									"pm.globals.set(\"encodedLedgersResponse\", CryptoJS.enc.Base64.stringify(utf8string));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersResponse}}\",\n  \"consentId\": \"{{piis_consent_id}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{piis_consent_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_cms}}"
							],
							"path": [
								"psu-api",
								"v1",
								"aspsp-consent-data",
								"consents",
								"{{piis_consent_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "7. Fund confirmation request in xs2a",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18c27c60-419a-452d-8982-61770963f010",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"fundsAvailable is present\", () => {",
									"    pm.expect(jsonData).to.have.property('fundsAvailable');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Request-ID",
								"value": "{{x_request_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"instructedAmount\": {\n    \"amount\": \"100.00\",\n    \"currency\": \"EUR\"\n  },\n  \"payee\": \"Check24\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url_xs2a}}/v1/funds-confirmations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url_xs2a}}"
							],
							"path": [
								"v1",
								"funds-confirmations"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "v2",
			"item": [
				{
					"name": "Errorful requests",
					"item": [
						{
							"name": "Validation failures",
							"item": [
								{
									"name": "1. Enable PIIS consent support in ASPSP profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd9bcab6-2e49-47f1-90f0-8e332898f3f4",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"TPP_CONSENT_SUPPORTED\"\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"implicit\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Create PIIS consent in XS2A oversized cardNumber",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b86c10d-8c50-4172-899e-ecafb0172cf2",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('TppMessages and error are exist', () => {",
													"    ",
													"    pm.expect(jsonData).to.have.property('tppMessages');",
													"    ",
													"    var error = jsonData.tppMessages[0];",
													"       ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('FORMAT_ERROR');",
													"    pm.expect(error.text).to.eql('Value \\'cardNumber\\' should not be more than 35 symbols');",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"type": "text",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"dqjqqqE62vfaoac2cSZSwQGs95dRnRgIK8sR\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v2",
												"consents",
												"confirmation-of-funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create PIIS consent in XS2A oversized cardInformation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58e3ba3c-4afb-41e2-8616-185716e625b2",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('TppMessages and error are exist', () => {",
													"    ",
													"    pm.expect(jsonData).to.have.property('tppMessages');",
													"    ",
													"    var error = jsonData.tppMessages[0];",
													"       ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('FORMAT_ERROR');",
													"    pm.expect(error.text).to.eql('Value \\'cardInformation\\' should not be more than 140 symbols');",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"type": "text",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"type": "text",
												"value": "{{x_request_id}}"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"type": "text",
												"value": "true"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"1J9m7Hcm0Lud9nqX8prXlQSsbQM3E30J7adDYMrIuINK9rb0ZeTnK1UFW1MxeYq9SHjtCvQau4dEtE5y7ER3AIhm5yv4gtxNiv3fx6iSGAdDKifaYzcDLmiZ0HwrS1Dy05FunvJMCOe2S\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v2",
												"consents",
												"confirmation-of-funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Create PIIS consent in XS2A oversized registrationInformation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07eb4f2b-4a1d-406b-b6b0-a0cbc5f9c84d",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('TppMessages and error are exist', () => {",
													"    ",
													"    pm.expect(jsonData).to.have.property('tppMessages');",
													"    ",
													"    var error = jsonData.tppMessages[0];",
													"       ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('FORMAT_ERROR');",
													"    pm.expect(error.text).to.eql('Value \\'registrationInformation\\' should not be more than 140 symbols');",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"type": "text",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"type": "text",
												"value": "{{x_request_id}}"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"type": "text",
												"value": "true"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"1J9m7Hcm0Lud9nqX8prXlQSsbQM3E30J7adDYMrIuINK9rb0ZeTnK1UFW1MxeYq9SHjtCvQau4dEtE5y7ER3AIhm5yv4gtxNiv3fx6iSGAdDKifaYzcDLmiZ0HwrS1Dy05FunvJMCOe2S\"\n\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v2",
												"consents",
												"confirmation-of-funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Create PIIS consent in XS2A invalid iban",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16f9338d-93f4-499f-b608-2087cf5998d6",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('TppMessages and error are exist', () => {",
													"    ",
													"    pm.expect(jsonData).to.have.property('tppMessages');",
													"    ",
													"    var error = jsonData.tppMessages[0];",
													"       ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('FORMAT_ERROR');",
													"    pm.expect(error.text).to.eql('Invalid IBAN format');",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"type": "text",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account\": {\n    \"iban\": \"invalid\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v2",
												"consents",
												"confirmation-of-funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Create PIIS consent in XS2A invalid currency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5007621e-8d3f-40b5-8446-b5e3d30b0609",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('TppMessages and error are exist', () => {",
													"    ",
													"    pm.expect(jsonData).to.have.property('tppMessages');",
													"    ",
													"    var error = jsonData.tppMessages[0];",
													"       ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('FORMAT_ERROR');",
													"    pm.expect(error.text).to.eql('Value \\'currency\\' has wrong format');",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"type": "text",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"currency\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v2",
												"consents",
												"confirmation-of-funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Create PIIS consent in XS2A null account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcce18b0-ef8e-4d5b-9ace-d3f2d69a77b0",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('TppMessages and error are exist', () => {",
													"    ",
													"    pm.expect(jsonData).to.have.property('tppMessages');",
													"    ",
													"    var error = jsonData.tppMessages[0];",
													"       ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('FORMAT_ERROR');",
													"    pm.expect(error.text).to.eql('Value \\'account\\' should not be null');",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"type": "text",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v2",
												"consents",
												"confirmation-of-funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Create PIIS consent in XS2A invalid account attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf05a40b-d9b6-49d7-81b1-ff6373734c53",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('TppMessages and error are exist', () => {",
													"    ",
													"    pm.expect(jsonData).to.have.property('tppMessages');",
													"    ",
													"    var error = jsonData.tppMessages[0];",
													"       ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('FORMAT_ERROR');",
													"    pm.expect(error.text).to.eql('Attribute PAN is not supported by the ASPSP');",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "psu-id",
												"type": "text",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account\": {\n    \"pan\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v2",
												"consents",
												"confirmation-of-funds"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "1. Enable PIIS consent support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b2e0a22-45d5-4dfd-994e-3f083f714a2f",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"ASPSP_CONSENT_SUPPORTED\"\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create PIIS consent in XS2A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c3d01ed-fe9c-4ca3-b334-43861862e6f4",
										"exec": [
											"pm.test(\"Status code is 405\", () => {",
											"    pm.response.to.have.status(405);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('TppMessages and error are exist', () => {",
											"    ",
											"    pm.expect(jsonData).to.have.property('tppMessages');",
											"    ",
											"    var error = jsonData.tppMessages[0];",
											"       ",
											"    pm.expect(error).to.have.property('category');",
											"    pm.expect(error).to.have.property('code');",
											"    pm.expect(error).to.have.property('text');",
											"       ",
											"    pm.expect(error.category).to.eql('ERROR');",
											"    pm.expect(error.code).to.eql('SERVICE_INVALID');",
											"    pm.expect(error.text).to.eql('The addressed service is not valid for the addressed resources or the submitted data');",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "psu-id",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "TPP-Explicit-Authorisation-Preferred",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v2",
										"consents",
										"confirmation-of-funds"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Successful requests",
					"item": [
						{
							"name": "Redirect",
							"item": [
								{
									"name": "Implicit",
									"item": [
										{
											"name": "1. Set redirect SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2b0f5452-d149-4395-a7b4-c2f9f6d7454b",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Enable PIIS consent support in ASPSP profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aa6db0a1-2599-4f98-9db8-43ea0253f786",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"TPP_CONSENT_SUPPORTED\",\n        \"redirectLinkToOnlineBanking\": {\n            \"piisRedirectUrlToAspsp\": \"http://localhost:4200/piis/{redirect-id}/{encrypted-consent-id}\"\n        }\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n            \"NONE\"\n        ]\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Create PIIS consent in XS2A",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "df5ca6f6-afa9-4981-bf30-512491f553f6",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"PIIS consent ID exists\", () => {",
															"   pm.expect(jsonData).to.have.property('consentId');",
															"});",
															"",
															"pm.globals.set(\"piis_consent_id\", jsonData.consentId);",
															"",
															"const scaRedirectLink = jsonData._links.scaRedirect.href;",
															"",
															"if (scaRedirectLink !== undefined) {",
															"    var a = scaRedirectLink.split('/');",
															"    a.pop();",
															"    const authorisationId = a.pop();",
															"    pm.globals.set(\"authorisation_id\", authorisationId);",
															"}",
															"",
															"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
															"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
															"pm.globals.set(\"redirect_id\", redirectId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "psu-id",
														"value": "{{psu_id_none}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. Get PIIS consent in XS2A",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "23460dbf-3c54-4049-a4df-ec74e94139c4",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Account is present\", () => {",
															"   pm.expect(jsonData).to.have.property('account');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ledgersBearerToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds",
														"{{piis_consent_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "5. Get PIIS consent status in XS2A",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "14462a3a-ce64-416c-8429-dd39901a8825",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"ConsentStatus is present\", () => {",
															"   pm.expect(jsonData).to.have.property('consentStatus');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ledgersBearerToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Request-ID",
														"type": "text",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}/status",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds",
														"{{piis_consent_id}}",
														"status"
													]
												}
											},
											"response": []
										},
										{
											"name": "6. Start the authorisation process for a consent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a2d2dc15-e413-4fa7-b4a7-fa90a490d91c",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Sca status is psuIdentified\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"scaRedirect link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaRedirect');",
															"});",
															"",
															"// splits string link by '/' to array and gets the last element - authorisationId",
															"// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
															"      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
															"",
															"    var a = jsonData._links.scaRedirect.href.split('/');",
															"    a.pop();",
															"    const authorisationId = a.pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"pm.globals.set(\"redirect_id\", authorisationId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c53f537d-8619-4bf7-92a4-8b9b01e3086e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_none}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds",
														"{{piis_consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "7. Read the SCA status of the consent authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d9d121e-dd7e-44e3-b864-ec60dd9013a9",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
											},
											"response": []
										},
										{
											"name": "8.  Get consent authorisation sub-resources request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2a77a05d-cdb6-4be7-9bbe-1bc5fa7922aa",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{consent_id}}/authorisations/",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds",
														"{{consent_id}}",
														"authorisations",
														""
													]
												},
												"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
											},
											"response": []
										},
										{
											"name": "9. Get consent response object by redirect id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4538a9e5-f78e-4d56-b4e8-b6c95e8644b5",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Authorisation id is present\", () => {",
															"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
															"});",
															"",
															"pm.test(\"Redirect URLs are present\", () => {",
															"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
															"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
															"});",
															"",
															"const authorisationId = jsonData.authorisationId;",
															"pm.test(\"Authorisation id is correct\", () => {",
															"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
															"});",
															"",
															"pm.test(\"Consent id is present\", () => {",
															"    pm.expect(jsonData.consent).to.have.property(\"id\");",
															"});",
															"",
															"pm.globals.set(\"internal_consent_id\", jsonData.consent.id);",
															"pm.globals.set(\"authorisation_id\", authorisationId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5e099221-0088-42ca-817f-ee44070d6715",
														"exec": [
															"pm.globals.unset(\"internal_consent_id\");",
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/redirect/{{redirect_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v2",
														"piis",
														"consent",
														"redirect",
														"{{redirect_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "10. Update PSU Data for consents",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7082fad8-09bd-4217-b8af-c770819fe3e3",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Implicit Multilevel",
									"item": [
										{
											"name": "Create Consent",
											"item": [
												{
													"name": "1. Set redirect SCA approach",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "73d3c5bb-d56a-4c3e-b6ee-efe8c1acab23",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
														},
														"url": {
															"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_aspsp_profile}}"
															],
															"path": [
																"api",
																"v1",
																"aspsp-profile",
																"for-debug",
																"sca-approaches"
															]
														}
													},
													"response": []
												},
												{
													"name": "2. Enable PIIS consent support in ASPSP profile",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c509f99f-2b4a-4b18-80f3-3e7a59d8adb5",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"TPP_CONSENT_SUPPORTED\",\n        \"redirectLinkToOnlineBanking\": {\n            \"piisRedirectUrlToAspsp\": \"http://localhost:4200/piis/{redirect-id}/{encrypted-consent-id}\"\n        }\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n            \"NONE\"\n        ]\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_aspsp_profile}}"
															],
															"path": [
																"api",
																"v1",
																"aspsp-profile",
																"for-debug",
																"aspsp-settings"
															]
														}
													},
													"response": []
												},
												{
													"name": "3. Create PIIS consent in XS2A",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "64895598-17b3-42e1-9e7e-cd85d5214ee0",
																"exec": [
																	"pm.test(\"Status code is 201\", () => {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"PIIS consent ID exists\", () => {",
																	"   pm.expect(jsonData).to.have.property('consentId');",
																	"});",
																	"",
																	"pm.globals.set(\"piis_consent_id\", jsonData.consentId);",
																	"",
																	"pm.test(\"startAuthorisation link exists\", () => {",
																	"    pm.expect(jsonData).to.have.property('_links');",
																	"    const _links = jsonData._links;",
																	"    ",
																	"    var startAuthorisation = _links.startAuthorisation.href;",
																	"",
																	"    if (startAuthorisation === undefined) {",
																	"       pm.expect().fail();",
																	"    }",
																	"});",
																	"",
																	"pm.test(\"Consent status is received\", () => {",
																	"    pm.expect(jsonData.consentStatus).to.eql('received');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "psu-id",
																"type": "text",
																"value": "{{psu_id_multilevel_1}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "X-Request-ID",
																"type": "text",
																"value": "{{x_request_id}}"
															},
															{
																"key": "TPP-Explicit-Authorisation-Preferred",
																"type": "text",
																"value": "true",
																"disabled": true
															},
															{
																"key": "TPP-Redirect-URI",
																"type": "text",
																"value": "TPP-Redirect-URI"
															},
															{
																"key": "TPP-Nok-Redirect-URI",
																"type": "text",
																"value": "TPP-Nok-Redirect-URI"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_multilevel}}\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_xs2a}}"
															],
															"path": [
																"v2",
																"consents",
																"confirmation-of-funds"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Start and finilised authorisation (USER 1)",
											"item": [
												{
													"name": "4. Start the authorisation process for a consent",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6728f764-ae95-4988-89a7-091c1b5038e7",
																"exec": [
																	"pm.test(\"Status code is 201\", () => {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Sca status is psuIdentified\", () => {",
																	"    pm.expect(jsonData.scaStatus).to.eql('psuIdentified');",
																	"});",
																	"",
																	"pm.test(\"scaRedirect link exists\", () => {",
																	"    pm.expect(jsonData).to.have.property('_links');",
																	"    const _links = jsonData._links;",
																	"    ",
																	"    pm.expect(_links).to.have.property('scaRedirect');",
																	"});",
																	"",
																	"// splits string link by '/' to array and gets the last element - authorisationId",
																	"// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
																	"      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
																	"",
																	"    var a = jsonData._links.scaRedirect.href.split('/');",
																	"    a.pop();",
																	"    const authorisationId = a.pop();",
																	"",
																	"pm.globals.set(\"authorisation_id\", authorisationId);",
																	"pm.globals.set(\"redirect_id\", authorisationId);",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "73f19f14-3794-4a85-90fc-eca9e01cff91",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "PSU-ID",
																"value": "{{psu_id_multilevel_1}}"
															},
															{
																"key": "X-Request-ID",
																"value": "{{x_request_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
														},
														"url": {
															"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}/authorisations",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_xs2a}}"
															],
															"path": [
																"v2",
																"consents",
																"confirmation-of-funds",
																"{{piis_consent_id}}",
																"authorisations"
															]
														},
														"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
													},
													"response": []
												},
												{
													"name": "5. Get consent response object by redirect id",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "31d47c29-6576-43a8-91de-d35617bd507e",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Authorisation id is present\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
																	"});",
																	"",
																	"pm.test(\"Redirect URLs are present\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
																	"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
																	"});",
																	"",
																	"const authorisationId = jsonData.authorisationId;",
																	"pm.test(\"Authorisation id is correct\", () => {",
																	"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
																	"});",
																	"",
																	"pm.test(\"Consent id is present\", () => {",
																	"    pm.expect(jsonData.consent).to.have.property(\"id\");",
																	"});",
																	"",
																	"pm.globals.set(\"internal_consent_id\", jsonData.consent.id);",
																	"pm.globals.set(\"authorisation_id\", authorisationId);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "a07bd82d-4f72-4165-9d92-86389556a859",
																"exec": [
																	"pm.globals.unset(\"internal_consent_id\");",
																	"pm.globals.unset(\"authorisation_id\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/redirect/{{redirect_id}}",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_cms}}"
															],
															"path": [
																"psu-api",
																"v2",
																"piis",
																"consent",
																"redirect",
																"{{redirect_id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "6. Update PSU Data in PIIS consent",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f3fb7e79-a1b6-41a0-aea7-a0460a0623c9",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"psuId\": \"{{psu_id_multilevel_1}}\",\n  \"psuIdType\": \"psuIdType\",\n  \"psuCorporateId\": \"psuCorporateId\",\n  \"psuCorporateIdType\": \"psuCorporateIdType\",\n  \"psuIpAddress\": \"1.1.1.1\"\n}"
														},
														"url": {
															"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/psu-data",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_cms}}"
															],
															"path": [
																"psu-api",
																"v2",
																"piis",
																"consent",
																"{{internal_consent_id}}",
																"authorisation",
																"{{authorisation_id}}",
																"psu-data"
															]
														}
													},
													"response": []
												},
												{
													"name": "7. Update a status of PIIS consent authorisation",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "efd9b5aa-4f8e-4bd3-9362-a9f575ebc581",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "PSU-ID",
																"value": "{{psu_id_none}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/FINALISED",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_cms}}"
															],
															"path": [
																"psu-api",
																"v2",
																"piis",
																"consent",
																"{{internal_consent_id}}",
																"authorisation",
																"{{authorisation_id}}",
																"status",
																"FINALISED"
															]
														}
													},
													"response": []
												},
												{
													"name": "8.  Get Confirmation of Funds Consent Authorisation by its ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "bb17217b-cd72-4ce8-b9a7-b9f64beb03c7",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Authorisation id is present\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
																	"});",
																	"",
																	"pm.test(\"Redirect URLs are present\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
																	"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
																	"});",
																	"",
																	"const authorisationId = jsonData.authorisationId;",
																	"pm.test(\"Authorisation id is correct\", () => {",
																	"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
																	"});",
																	"",
																	"const scaStatus = jsonData.scaStatus;",
																	"pm.test(\"Authorisation is finalised\", () => {",
																	"    pm.expect(scaStatus).to.eql(\"finalised\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "5ef620c1-32e1-4c40-b09e-2e5cfbe21da1",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/authorisation/{{authorisation_id}}",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_cms}}"
															],
															"path": [
																"psu-api",
																"v2",
																"piis",
																"consent",
																"authorisation",
																"{{authorisation_id}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Start and finilised authorisation (USER 2)",
											"item": [
												{
													"name": "9. Start the authorisation process for a consent",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "4baab9d8-c4c4-4588-bf93-e3419b553d38",
																"exec": [
																	"pm.test(\"Status code is 201\", () => {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Sca status is psuIdentified\", () => {",
																	"    pm.expect(jsonData.scaStatus).to.eql('psuIdentified');",
																	"});",
																	"",
																	"pm.test(\"scaRedirect link exists\", () => {",
																	"    pm.expect(jsonData).to.have.property('_links');",
																	"    const _links = jsonData._links;",
																	"    ",
																	"    pm.expect(_links).to.have.property('scaRedirect');",
																	"});",
																	"",
																	"// splits string link by '/' to array and gets the last element - authorisationId",
																	"// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
																	"      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
																	"",
																	"    var a = jsonData._links.scaRedirect.href.split('/');",
																	"    a.pop();",
																	"    const authorisationId = a.pop();",
																	"",
																	"pm.globals.set(\"authorisation_id\", authorisationId);",
																	"pm.globals.set(\"redirect_id\", authorisationId);",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "34b78fd9-dbb9-44ba-9158-28d5805a47c0",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "PSU-ID",
																"value": "{{psu_id_multilevel_2}}"
															},
															{
																"key": "X-Request-ID",
																"value": "{{x_request_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
														},
														"url": {
															"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}/authorisations",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_xs2a}}"
															],
															"path": [
																"v2",
																"consents",
																"confirmation-of-funds",
																"{{piis_consent_id}}",
																"authorisations"
															]
														},
														"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
													},
													"response": []
												},
												{
													"name": "10. Get consent response object by redirect id",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "263a6b0d-80bd-4862-a00c-36136396827d",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Authorisation id is present\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
																	"});",
																	"",
																	"pm.test(\"Redirect URLs are present\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
																	"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
																	"});",
																	"",
																	"const authorisationId = jsonData.authorisationId;",
																	"pm.test(\"Authorisation id is correct\", () => {",
																	"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
																	"});",
																	"",
																	"pm.test(\"Consent id is present\", () => {",
																	"    pm.expect(jsonData.consent).to.have.property(\"id\");",
																	"});",
																	"",
																	"pm.globals.set(\"internal_consent_id\", jsonData.consent.id);",
																	"pm.globals.set(\"authorisation_id\", authorisationId);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "f3faa74e-a339-4fce-b903-4b66204d3dd4",
																"exec": [
																	"pm.globals.unset(\"internal_consent_id\");",
																	"pm.globals.unset(\"authorisation_id\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/redirect/{{redirect_id}}",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_cms}}"
															],
															"path": [
																"psu-api",
																"v2",
																"piis",
																"consent",
																"redirect",
																"{{redirect_id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "11. Update PSU Data in PIIS consent",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "717b45d4-f90c-435a-9c79-878e43c037a3",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"psuId\": \"{{psu_id_multilevel_2}}\",\n  \"psuIdType\": \"psuIdType\",\n  \"psuCorporateId\": \"psuCorporateId\",\n  \"psuCorporateIdType\": \"psuCorporateIdType\",\n  \"psuIpAddress\": \"1.1.1.1\"\n}"
														},
														"url": {
															"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/psu-data",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_cms}}"
															],
															"path": [
																"psu-api",
																"v2",
																"piis",
																"consent",
																"{{internal_consent_id}}",
																"authorisation",
																"{{authorisation_id}}",
																"psu-data"
															]
														}
													},
													"response": []
												},
												{
													"name": "12. Update a status of PIIS consent authorisation",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d765b0ce-f66a-4ee9-ac40-13e106457500",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "PSU-ID",
																"value": "{{psu_id_none}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/FINALISED",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_cms}}"
															],
															"path": [
																"psu-api",
																"v2",
																"piis",
																"consent",
																"{{internal_consent_id}}",
																"authorisation",
																"{{authorisation_id}}",
																"status",
																"FINALISED"
															]
														}
													},
													"response": []
												},
												{
													"name": "13.  Get Confirmation of Funds Consent Authorisation by its ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c090986f-c429-4711-8b1b-2469c682dcc7",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Authorisation id is present\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
																	"});",
																	"",
																	"pm.test(\"Redirect URLs are present\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
																	"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
																	"});",
																	"",
																	"const authorisationId = jsonData.authorisationId;",
																	"pm.test(\"Authorisation id is correct\", () => {",
																	"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
																	"});",
																	"",
																	"const scaStatus = jsonData.scaStatus;",
																	"pm.test(\"Authorisation is finalised\", () => {",
																	"    pm.expect(scaStatus).to.eql(\"finalised\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "1181f67f-8450-4655-8617-0c8da3a8f91a",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/authorisation/{{authorisation_id}}",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_cms}}"
															],
															"path": [
																"psu-api",
																"v2",
																"piis",
																"consent",
																"authorisation",
																"{{authorisation_id}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Confirm Consent and read information",
											"item": [
												{
													"name": "14.  Get Confirmation of Funds Consent by its ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a1657857-b654-456b-b453-45a2af17125c",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"const consentStatus = jsonData.consentStatus;",
																	"pm.test(\"ConsentStatus is RECEIVED\", () => {",
																	"    pm.expect(consentStatus).to.eql(\"RECEIVED\");",
																	"});",
																	"",
																	"const authorisations = jsonData.authorisations;",
																	"pm.test(\"Check if all authorisation is finilised\", () => {",
																	"    //pm.expect(consentStatus).to.eql(\"RECEIVED\");",
																	"",
																	"    authorisations.forEach((auth) => {",
																	"        pm.expect(auth.scaStatus).to.eql(\"finalised\");",
																	"    });",
																	"",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "d0b52198-6726-4e1c-bf92-2aa07971359a",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_cms}}"
															],
															"path": [
																"psu-api",
																"v2",
																"piis",
																"consent",
																"{{internal_consent_id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "15. Confirm PIIS consent",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d48c2752-f53d-44c6-9034-27fb018323ce",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "PSU-ID",
																"value": "{{psu_id_none}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}/status/VALID",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_cms}}"
															],
															"path": [
																"psu-api",
																"v2",
																"piis",
																"consent",
																"{{internal_consent_id}}",
																"status",
																"VALID"
															]
														}
													},
													"response": []
												},
												{
													"name": "16.  Get Confirmation of Funds Consent by its ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "7e11d0b6-dae7-4871-8598-6f0927e09993",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"const consentStatus = jsonData.consentStatus;",
																	"pm.test(\"ConsentStatus is VALID\", () => {",
																	"    pm.expect(consentStatus).to.eql(\"VALID\");",
																	"});",
																	"",
																	"const authorisations = jsonData.authorisations;",
																	"pm.test(\"Check if all authorisation is finilised\", () => {",
																	"    //pm.expect(consentStatus).to.eql(\"RECEIVED\");",
																	"",
																	"    authorisations.forEach((auth) => {",
																	"        pm.expect(auth.scaStatus).to.eql(\"finalised\");",
																	"    });",
																	"",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "b3f61bb3-99ae-475f-8612-f8bbec3cbddc",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_cms}}"
															],
															"path": [
																"psu-api",
																"v2",
																"piis",
																"consent",
																"{{internal_consent_id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "17. Get PIIS consent in XS2A",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "2e1f6773-29dd-4351-99f6-3ba48e6f5d9b",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Account is present\", () => {",
																	"   pm.expect(jsonData).to.have.property('account');",
																	"});",
																	"",
																	"const consentStatus = jsonData.consentStatus;",
																	"pm.test(\"ConsentStatus is valid\", () => {",
																	"    pm.expect(consentStatus).to.eql(\"valid\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{ledgersBearerToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "X-Request-ID",
																"type": "text",
																"value": "{{x_request_id}}"
															}
														],
														"url": {
															"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_xs2a}}"
															],
															"path": [
																"v2",
																"consents",
																"confirmation-of-funds",
																"{{piis_consent_id}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Explicit",
									"item": [
										{
											"name": "1. Set redirect SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "510d2b09-b630-4e1b-9a4d-8e91e18c6922",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Enable PIIS consent support in ASPSP profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "218017cc-183f-45c1-868d-9e61b15faa31",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"TPP_CONSENT_SUPPORTED\",\n        \"redirectLinkToOnlineBanking\": {\n            \"piisRedirectUrlToAspsp\": \"http://localhost:4200/piis/{redirect-id}/{encrypted-consent-id}\"\n        }\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": true,\n        \"aspspNotificationsSupported\": [\n        ]\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Create PIIS consent in XS2A",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "53e7446f-9878-4956-9790-af280c293234",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"PIIS consent ID exists\", () => {",
															"   pm.expect(jsonData).to.have.property('consentId');",
															"});",
															"",
															"pm.globals.set(\"piis_consent_id\", jsonData.consentId);",
															"",
															"pm.test(\"startAuthorisation link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    var startAuthorisation = _links.startAuthorisation.href;",
															"",
															"    if (startAuthorisation === undefined) {",
															"       pm.expect().fail();",
															"    }",
															"});",
															"",
															"pm.test(\"Consent status is received\", () => {",
															"    pm.expect(jsonData.consentStatus).to.eql('received');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "psu-id",
														"value": "{{psu_id_none}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. Start the authorisation process for a consent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24eab0ba-4b2f-4308-9cd8-e6a591b76892",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Sca status is psuIdentified\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"scaRedirect link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaRedirect');",
															"});",
															"",
															"// splits string link by '/' to array and gets the last element - authorisationId",
															"// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
															"      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
															"",
															"    var a = jsonData._links.scaRedirect.href.split('/');",
															"    a.pop();",
															"    const authorisationId = a.pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"pm.globals.set(\"redirect_id\", authorisationId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "de85371c-e796-4399-96a9-753be2a7ff45",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_none}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds",
														"{{piis_consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "5. Get consent response object by redirect id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "14faf7d0-de1c-4fcd-8050-553007ee8d23",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Authorisation id is present\", () => {",
															"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
															"});",
															"",
															"pm.test(\"Redirect URLs are present\", () => {",
															"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
															"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
															"});",
															"",
															"const authorisationId = jsonData.authorisationId;",
															"pm.test(\"Authorisation id is correct\", () => {",
															"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
															"});",
															"",
															"pm.test(\"Consent id is present\", () => {",
															"    pm.expect(jsonData.consent).to.have.property(\"id\");",
															"});",
															"",
															"pm.globals.set(\"internal_consent_id\", jsonData.consent.id);",
															"pm.globals.set(\"authorisation_id\", authorisationId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "61d2645a-796c-44ff-89db-f1e40a7e2e06",
														"exec": [
															"pm.globals.unset(\"internal_consent_id\");",
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/redirect/{{redirect_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v2",
														"piis",
														"consent",
														"redirect",
														"{{redirect_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "6. Update PSU Data in PIIS consent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "626197fd-0253-44db-9a81-5d06b56921ec",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"psuId\": \"{{psu_id_none}}\",\n  \"psuIdType\": \"psuIdType\",\n  \"psuCorporateId\": \"psuCorporateId\",\n  \"psuCorporateIdType\": \"psuCorporateIdType\",\n  \"psuIpAddress\": \"1.1.1.1\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/psu-data",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v2",
														"piis",
														"consent",
														"{{internal_consent_id}}",
														"authorisation",
														"{{authorisation_id}}",
														"psu-data"
													]
												}
											},
											"response": []
										},
										{
											"name": "7. Update a status of PIIS consent authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "df3271a1-6c84-42db-a6d5-066b982eac44",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "PSU-ID",
														"value": "{{psu_id_none}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/FINALISED",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v2",
														"piis",
														"consent",
														"{{internal_consent_id}}",
														"authorisation",
														"{{authorisation_id}}",
														"status",
														"FINALISED"
													]
												}
											},
											"response": []
										},
										{
											"name": "8.  Get Confirmation of Funds Consent Authorisation by its ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "780a06f3-6c10-4c4e-9798-bc69a9dcf496",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Authorisation id is present\", () => {",
															"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
															"});",
															"",
															"pm.test(\"Redirect URLs are present\", () => {",
															"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
															"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
															"});",
															"",
															"const authorisationId = jsonData.authorisationId;",
															"pm.test(\"Authorisation id is correct\", () => {",
															"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
															"});",
															"",
															"const scaStatus = jsonData.scaStatus;",
															"pm.test(\"Authorisation is finalised\", () => {",
															"    pm.expect(scaStatus).to.eql(\"finalised\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6b965135-b2c3-4e8c-80d7-eec7464ddc04",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/authorisation/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v2",
														"piis",
														"consent",
														"authorisation",
														"{{authorisation_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "9. Confirm PIIS consent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e330b1f7-0638-43cd-9383-c4da187dfc0b",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "PSU-ID",
														"value": "{{psu_id_none}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}/status/VALID",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v2",
														"piis",
														"consent",
														"{{internal_consent_id}}",
														"status",
														"VALID"
													]
												}
											},
											"response": []
										},
										{
											"name": "10.  Get Confirmation of Funds Consent by its ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1cfb701e-492f-4daf-9ac2-c1455a2582bc",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"const consentStatus = jsonData.consentStatus;",
															"pm.test(\"ConsentStatus is VALID\", () => {",
															"    pm.expect(consentStatus).to.eql(\"VALID\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d12decff-04fc-472a-8674-249c497e8274",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v2",
														"piis",
														"consent",
														"{{internal_consent_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "11. Get PIIS consent in XS2A",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d8f06cfe-0cb5-4511-987a-070288c4b933",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Account is present\", () => {",
															"   pm.expect(jsonData).to.have.property('account');",
															"});",
															"",
															"const consentStatus = jsonData.consentStatus;",
															"pm.test(\"ConsentStatus is valid\", () => {",
															"    pm.expect(consentStatus).to.eql(\"valid\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ledgersBearerToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Request-ID",
														"type": "text",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds",
														"{{piis_consent_id}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete PIIS Consent",
									"item": [
										{
											"name": "Validation",
											"item": [
												{
													"name": "1. Set redirect SCA approach",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "29b9b3c9-56b4-4551-b32e-e15eef717a78",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
														},
														"url": {
															"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_aspsp_profile}}"
															],
															"path": [
																"api",
																"v1",
																"aspsp-profile",
																"for-debug",
																"sca-approaches"
															]
														}
													},
													"response": []
												},
												{
													"name": "2. Enable PIIS consent support in ASPSP profile",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "7b5bd20b-a502-40eb-aeae-965f707ec796",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"TPP_CONSENT_SUPPORTED\",\n        \"redirectLinkToOnlineBanking\": {\n            \"piisRedirectUrlToAspsp\": \"http://localhost:4200/piis/{redirect-id}/{encrypted-consent-id}\"\n        }\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"implicit\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n            \"NONE\"\n        ]\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_aspsp_profile}}"
															],
															"path": [
																"api",
																"v1",
																"aspsp-profile",
																"for-debug",
																"aspsp-settings"
															]
														}
													},
													"response": []
												},
												{
													"name": "3. Create PIIS consent in XS2A",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "e2d8d61a-4392-444e-8338-c0bd751a9aed",
																"exec": [
																	"pm.test(\"Status code is 201\", () => {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"PIIS consent ID exists\", () => {",
																	"   pm.expect(jsonData).to.have.property('consentId');",
																	"});",
																	"",
																	"pm.globals.set(\"piis_consent_id\", jsonData.consentId);",
																	"",
																	"const scaRedirectLink = jsonData._links.scaRedirect.href;",
																	"",
																	"if (scaRedirectLink !== undefined) {",
																	"    var a = scaRedirectLink.split('/');",
																	"    a.pop();",
																	"    const authorisationId = a.pop();",
																	"    pm.globals.set(\"authorisation_id\", authorisationId);",
																	"}",
																	"",
																	"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
																	"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
																	"pm.globals.set(\"redirect_id\", redirectId);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "psu-id",
																"value": "{{psu_id_none}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-Request-ID",
																"value": "{{x_request_id}}",
																"type": "text"
															},
															{
																"key": "TPP-Explicit-Authorisation-Preferred",
																"value": "true",
																"type": "text"
															},
															{
																"key": "TPP-Redirect-URI",
																"value": "TPP-Redirect-URI",
																"type": "text"
															},
															{
																"key": "TPP-Nok-Redirect-URI",
																"value": "TPP-Nok-Redirect-URI",
																"type": "text"
															},
															{
																"key": "tpp-qwac-certificate",
																"value": "{{wrong-certificate}}",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_xs2a}}"
															],
															"path": [
																"v2",
																"consents",
																"confirmation-of-funds"
															]
														}
													},
													"response": []
												},
												{
													"name": "4. Delete PIIS Consent",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "7b80cf4b-06d5-4910-b470-6133b859f27a",
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test('TppMessages and error are exist', () => {",
																	"    ",
																	"    pm.expect(jsonData).to.have.property('tppMessages');",
																	"    ",
																	"    var error = jsonData.tppMessages[0];",
																	"       ",
																	"    pm.expect(error).to.have.property('category');",
																	"    pm.expect(error).to.have.property('code');",
																	"    pm.expect(error).to.have.property('text');",
																	"       ",
																	"    pm.expect(error.category).to.eql('ERROR');",
																	"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
																	"    pm.expect(error.text).to.eql('TPP certificate doesn’t match the initial request');",
																	"    ",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-Request-ID",
																"value": "{{x_request_id}}"
															},
															{
																"key": "tpp-qwac-certificate",
																"value": "{{wrong-certificate}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_xs2a}}"
															],
															"path": [
																"v2",
																"consents",
																"confirmation-of-funds",
																"{{piis_consent_id}}"
															]
														},
														"description": "The TPP can delete an account information consent object if needed."
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Not authorized",
											"item": [
												{
													"name": "1. Set redirect SCA approach",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "9ae9efbf-87d7-4511-8b4a-e5293ecba71a",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
														},
														"url": {
															"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_aspsp_profile}}"
															],
															"path": [
																"api",
																"v1",
																"aspsp-profile",
																"for-debug",
																"sca-approaches"
															]
														}
													},
													"response": []
												},
												{
													"name": "2. Enable PIIS consent support in ASPSP profile",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b9147945-60a6-44b3-be04-12e5432c736d",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"TPP_CONSENT_SUPPORTED\",\n        \"redirectLinkToOnlineBanking\": {\n            \"piisRedirectUrlToAspsp\": \"http://localhost:4200/piis/{redirect-id}/{encrypted-consent-id}\"\n        }\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"implicit\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n            \"NONE\"\n        ]\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_aspsp_profile}}"
															],
															"path": [
																"api",
																"v1",
																"aspsp-profile",
																"for-debug",
																"aspsp-settings"
															]
														}
													},
													"response": []
												},
												{
													"name": "3. Create PIIS consent in XS2A",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "140c1744-b393-4f95-a590-366473a4f25d",
																"exec": [
																	"pm.test(\"Status code is 201\", () => {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"PIIS consent ID exists\", () => {",
																	"   pm.expect(jsonData).to.have.property('consentId');",
																	"});",
																	"",
																	"pm.globals.set(\"piis_consent_id\", jsonData.consentId);",
																	"",
																	"const scaRedirectLink = jsonData._links.scaRedirect.href;",
																	"",
																	"if (scaRedirectLink !== undefined) {",
																	"    var a = scaRedirectLink.split('/');",
																	"    a.pop();",
																	"    const authorisationId = a.pop();",
																	"    pm.globals.set(\"authorisation_id\", authorisationId);",
																	"}",
																	"",
																	"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
																	"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
																	"pm.globals.set(\"redirect_id\", redirectId);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "psu-id",
																"value": "{{psu_id_none}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-Request-ID",
																"value": "{{x_request_id}}",
																"type": "text"
															},
															{
																"key": "TPP-Explicit-Authorisation-Preferred",
																"value": "true",
																"type": "text"
															},
															{
																"key": "TPP-Redirect-URI",
																"value": "TPP-Redirect-URI",
																"type": "text"
															},
															{
																"key": "TPP-Nok-Redirect-URI",
																"value": "TPP-Nok-Redirect-URI",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_xs2a}}"
															],
															"path": [
																"v2",
																"consents",
																"confirmation-of-funds"
															]
														}
													},
													"response": []
												},
												{
													"name": "4. Delete PIIS Consent",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "0562a851-c3c8-44dc-9f3b-302c951202e6",
																"exec": [
																	"pm.test(\"Status code is 204\", function () {",
																	"    pm.response.to.have.status(204);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-Request-ID",
																"value": "{{x_request_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_xs2a}}"
															],
															"path": [
																"v2",
																"consents",
																"confirmation-of-funds",
																"{{piis_consent_id}}"
															]
														},
														"description": "The TPP can delete an account information consent object if needed."
													},
													"response": []
												},
												{
													"name": "5. Get PIIS consent status in XS2A",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b2d1bbdf-1041-48c4-825a-20b95416dddd",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"ConsentStatus is rejected\", () => {",
																	"   pm.expect(jsonData).to.have.property('consentStatus');",
																	"   pm.expect(jsonData.consentStatus).to.eql(\"rejected\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{ledgersBearerToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "X-Request-ID",
																"type": "text",
																"value": "{{x_request_id}}"
															}
														],
														"url": {
															"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}/status",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_xs2a}}"
															],
															"path": [
																"v2",
																"consents",
																"confirmation-of-funds",
																"{{piis_consent_id}}",
																"status"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Authorized",
											"item": [
												{
													"name": "1. Set redirect SCA approach",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "aa1f473b-6b34-4799-bb44-0ba42b417c35",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
														},
														"url": {
															"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_aspsp_profile}}"
															],
															"path": [
																"api",
																"v1",
																"aspsp-profile",
																"for-debug",
																"sca-approaches"
															]
														}
													},
													"response": []
												},
												{
													"name": "2. Enable PIIS consent support in ASPSP profile",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "014d78d1-f38d-45d6-b273-9a79db4a1ab3",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"TPP_CONSENT_SUPPORTED\",\n        \"redirectLinkToOnlineBanking\": {\n            \"piisRedirectUrlToAspsp\": \"http://localhost:4200/piis/{redirect-id}/{encrypted-consent-id}\"\n        }\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"implicit\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n            \"NONE\"\n        ]\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_aspsp_profile}}"
															],
															"path": [
																"api",
																"v1",
																"aspsp-profile",
																"for-debug",
																"aspsp-settings"
															]
														}
													},
													"response": []
												},
												{
													"name": "3. Create PIIS consent in XS2A",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d469af80-2541-4e6e-a3a8-58ec98c47af2",
																"exec": [
																	"pm.test(\"Status code is 201\", () => {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"PIIS consent ID exists\", () => {",
																	"   pm.expect(jsonData).to.have.property('consentId');",
																	"});",
																	"",
																	"pm.globals.set(\"piis_consent_id\", jsonData.consentId);",
																	"",
																	"const scaRedirectLink = jsonData._links.scaRedirect.href;",
																	"",
																	"if (scaRedirectLink !== undefined) {",
																	"    var a = scaRedirectLink.split('/');",
																	"    a.pop();",
																	"    const authorisationId = a.pop();",
																	"    pm.globals.set(\"authorisation_id\", authorisationId);",
																	"}",
																	"",
																	"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
																	"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
																	"pm.globals.set(\"redirect_id\", redirectId);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "psu-id",
																"value": "{{psu_id_none}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-Request-ID",
																"value": "{{x_request_id}}",
																"type": "text"
															},
															{
																"key": "TPP-Explicit-Authorisation-Preferred",
																"value": "true",
																"type": "text"
															},
															{
																"key": "TPP-Redirect-URI",
																"value": "TPP-Redirect-URI",
																"type": "text"
															},
															{
																"key": "TPP-Nok-Redirect-URI",
																"value": "TPP-Nok-Redirect-URI",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_xs2a}}"
															],
															"path": [
																"v2",
																"consents",
																"confirmation-of-funds"
															]
														}
													},
													"response": []
												},
												{
													"name": "4. Get consent response object by redirect id",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "2780d6f9-f384-434e-91d1-9a6d8f29a204",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Authorisation id is present\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
																	"});",
																	"",
																	"pm.test(\"Redirect URLs are present\", () => {",
																	"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
																	"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
																	"});",
																	"",
																	"const authorisationId = jsonData.authorisationId;",
																	"pm.test(\"Authorisation id is correct\", () => {",
																	"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
																	"});",
																	"",
																	"pm.test(\"Consent id is present\", () => {",
																	"    pm.expect(jsonData.consent).to.have.property(\"id\");",
																	"});",
																	"",
																	"pm.globals.set(\"internal_consent_id\", jsonData.consent.id);",
																	"pm.globals.set(\"authorisation_id\", authorisationId);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "71e9cfae-966f-48c7-bbdc-0d5e9c4623a6",
																"exec": [
																	"pm.globals.unset(\"internal_consent_id\");",
																	"pm.globals.unset(\"authorisation_id\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/redirect/{{redirect_id}}",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_cms}}"
															],
															"path": [
																"psu-api",
																"v2",
																"piis",
																"consent",
																"redirect",
																"{{redirect_id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "5. Update PIIS Consent status",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d4c81c4c-d438-46ac-a0cf-ae2a490fa497",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-Request-ID",
																"value": "{{x_request_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
														},
														"url": {
															"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}/status/VALID",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_cms}}"
															],
															"path": [
																"psu-api",
																"v2",
																"piis",
																"consent",
																"{{internal_consent_id}}",
																"status",
																"VALID"
															]
														},
														"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
													},
													"response": []
												},
												{
													"name": "6. Get PIIS consent status in XS2A",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "3e618cba-0791-4d18-bc7d-9fceda9c99ad",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"ConsentStatus is valid\", () => {",
																	"   pm.expect(jsonData).to.have.property('consentStatus');",
																	"   pm.expect(jsonData.consentStatus).to.eql(\"valid\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{ledgersBearerToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "X-Request-ID",
																"type": "text",
																"value": "{{x_request_id}}"
															}
														],
														"url": {
															"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}/status",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_xs2a}}"
															],
															"path": [
																"v2",
																"consents",
																"confirmation-of-funds",
																"{{piis_consent_id}}",
																"status"
															]
														}
													},
													"response": []
												},
												{
													"name": "7. Delete PIIS Consent",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a3c0be08-3acf-47b5-9ec1-65a30e2f3839",
																"exec": [
																	"pm.test(\"Status code is 204\", function () {",
																	"    pm.response.to.have.status(204);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-Request-ID",
																"value": "{{x_request_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_xs2a}}"
															],
															"path": [
																"v2",
																"consents",
																"confirmation-of-funds",
																"{{piis_consent_id}}"
															]
														},
														"description": "The TPP can delete an account information consent object if needed."
													},
													"response": []
												},
												{
													"name": "8. Get PIIS consent status in XS2A",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ffb5c1f0-aa73-427b-a093-9c3213e758f9",
																"exec": [
																	"pm.test(\"Status code is 200\", () => {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"ConsentStatus is terminatedByTpp\", () => {",
																	"   pm.expect(jsonData).to.have.property('consentStatus');",
																	"   pm.expect(jsonData.consentStatus).to.eql(\"terminatedByTpp\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{ledgersBearerToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "X-Request-ID",
																"type": "text",
																"value": "{{x_request_id}}"
															}
														],
														"url": {
															"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}/status",
															"protocol": "{{protocol}}",
															"host": [
																"{{url_xs2a}}"
															],
															"path": [
																"v2",
																"consents",
																"confirmation-of-funds",
																"{{piis_consent_id}}",
																"status"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Reject PIIS Consent",
									"item": [
										{
											"name": "1. Set redirect SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7f030d1b-c41c-4f53-9d7b-8f44cf66e720",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Enable PIIS consent support in ASPSP profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b2dc1dcf-1eb4-4f1d-af17-98d2cf3d3787",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"TPP_CONSENT_SUPPORTED\",\n        \"redirectLinkToOnlineBanking\": {\n            \"piisRedirectUrlToAspsp\": \"http://localhost:4200/piis/{redirect-id}/{encrypted-consent-id}\"\n        }\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": true,\n        \"aspspNotificationsSupported\": [\n        ]\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Create PIIS consent in XS2A",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3019b3b6-2519-4c85-80cc-3e2ec006527a",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"PIIS consent ID exists\", () => {",
															"   pm.expect(jsonData).to.have.property('consentId');",
															"});",
															"",
															"pm.globals.set(\"piis_consent_id\", jsonData.consentId);",
															"",
															"pm.test(\"startAuthorisation link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    var startAuthorisation = _links.startAuthorisation.href;",
															"",
															"    if (startAuthorisation === undefined) {",
															"       pm.expect().fail();",
															"    }",
															"});",
															"",
															"pm.test(\"Consent status is received\", () => {",
															"    pm.expect(jsonData.consentStatus).to.eql('received');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "psu-id",
														"value": "{{psu_id_none}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. Start the authorisation process for a consent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "52e70d2c-5866-49e0-b3e9-37ab208f9309",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Sca status is psuIdentified\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"scaRedirect link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaRedirect');",
															"});",
															"",
															"// splits string link by '/' to array and gets the last element - authorisationId",
															"// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
															"      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
															"",
															"    var a = jsonData._links.scaRedirect.href.split('/');",
															"    a.pop();",
															"    const authorisationId = a.pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"pm.globals.set(\"redirect_id\", authorisationId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7b9056af-0971-47f3-9f44-31d4c4c04117",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_none}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds",
														"{{piis_consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "5. Get consent response object by redirect id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8e0206f9-10c7-466c-b19a-f9f18ec066bb",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Authorisation id is present\", () => {",
															"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
															"});",
															"",
															"pm.test(\"Redirect URLs are present\", () => {",
															"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
															"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
															"});",
															"",
															"const authorisationId = jsonData.authorisationId;",
															"pm.test(\"Authorisation id is correct\", () => {",
															"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
															"});",
															"",
															"pm.test(\"Consent id is present\", () => {",
															"    pm.expect(jsonData.consent).to.have.property(\"id\");",
															"});",
															"",
															"pm.globals.set(\"internal_consent_id\", jsonData.consent.id);",
															"pm.globals.set(\"authorisation_id\", authorisationId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1d789cc7-266b-47be-b8bd-7b520fce7f24",
														"exec": [
															"pm.globals.unset(\"internal_consent_id\");",
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/redirect/{{redirect_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v2",
														"piis",
														"consent",
														"redirect",
														"{{redirect_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "7. Update a status of PIIS consent authorisation (FAILED)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7ce28a54-e8c2-4e5e-afa3-7724c0fb08e4",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "PSU-ID",
														"type": "text",
														"value": "{{psu_id_none}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/FAILED",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v2",
														"piis",
														"consent",
														"{{internal_consent_id}}",
														"authorisation",
														"{{authorisation_id}}",
														"status",
														"FAILED"
													]
												}
											},
											"response": []
										},
										{
											"name": "8.  Get Confirmation of Funds Consent Authorisation by its ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0c96492c-e33d-4257-997c-87d3d3b695bf",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Authorisation id is present\", () => {",
															"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
															"});",
															"",
															"pm.test(\"Redirect URLs are present\", () => {",
															"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
															"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
															"});",
															"",
															"const authorisationId = jsonData.authorisationId;",
															"pm.test(\"Authorisation id is correct\", () => {",
															"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
															"});",
															"",
															"const scaStatus = jsonData.scaStatus;",
															"pm.test(\"Authorisation is failed\", () => {",
															"    pm.expect(scaStatus).to.eql(\"failed\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f8d687ec-f658-44a2-894a-ecfa48aca191",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/authorisation/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v2",
														"piis",
														"consent",
														"authorisation",
														"{{authorisation_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "9. Reject PIIS consent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1bd15b43-df67-485f-9239-8b2c836b61ec",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "PSU-ID",
														"type": "text",
														"value": "{{psu_id_none}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}/status/REJECTED",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v2",
														"piis",
														"consent",
														"{{internal_consent_id}}",
														"status",
														"REJECTED"
													]
												}
											},
											"response": []
										},
										{
											"name": "10.  Get Confirmation of Funds Consent by its ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8537e388-b62f-4989-bb71-fb49d6efbfe3",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"const consentStatus = jsonData.consentStatus;",
															"pm.test(\"ConsentStatus is REJECTED\", () => {",
															"    pm.expect(consentStatus).to.eql(\"REJECTED\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0fb85d76-7d96-4e9a-8c32-21e9d2e2e1dc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{protocol}}://{{url_cms}}/psu-api/v2/piis/consent/{{internal_consent_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_cms}}"
													],
													"path": [
														"psu-api",
														"v2",
														"piis",
														"consent",
														"{{internal_consent_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "11. Get PIIS consent in XS2A",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2a667cf0-6d0d-448c-8324-c3f1757d5945",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Account is present\", () => {",
															"   pm.expect(jsonData).to.have.property('account');",
															"});",
															"",
															"const consentStatus = jsonData.consentStatus;",
															"pm.test(\"ConsentStatus is rejected\", () => {",
															"    pm.expect(consentStatus).to.eql(\"rejected\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ledgersBearerToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Request-ID",
														"type": "text",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds",
														"{{piis_consent_id}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embedded",
							"item": [
								{
									"name": "Implicit",
									"item": [
										{
											"name": "1. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "414ac22a-46bc-4207-ad99-f8f526ed5a70",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Enable PIIS consent support in ASPSP profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "72865906-3dd5-4e8f-8d01-cd9d48e2e46c",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"TPP_CONSENT_SUPPORTED\",\n                \"redirectLinkToOnlineBanking\": {\n            \"piisRedirectUrlToAspsp\": \"http://localhost:4200/piis/{redirect-id}/{encrypted-consent-id}\"\n        }\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"implicit\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ]\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Create PIIS consent in XS2A",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "715197b2-1b0b-43dd-80c4-81fb8c2c1b0a",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"PIIS consent ID exists\", () => {",
															"   pm.expect(jsonData).to.have.property('consentId');",
															"});",
															"",
															"pm.globals.set(\"piis_consent_id\", jsonData.consentId);",
															"",
															"pm.test(\"Update PSU authentication link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
															"",
															"    if (updatePsuAuthentication === undefined) {",
															"       pm.expect().fail();",
															"    }",
															"});",
															"",
															"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "psu-id",
														"type": "text",
														"value": "{{psu_id_none}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. Get PIIS consent in XS2A",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3a944b81-8447-4d40-871d-ae568de7e3a8",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Account is present\", () => {",
															"   pm.expect(jsonData).to.have.property('account');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ledgersBearerToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds",
														"{{piis_consent_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "5. Get PIIS consent status in XS2A",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c7aba306-f93b-4765-832b-a25ac75ad402",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"ConsentStatus is present\", () => {",
															"   pm.expect(jsonData).to.have.property('consentStatus');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{ledgersBearerToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Request-ID",
														"type": "text",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}/status",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds",
														"{{piis_consent_id}}",
														"status"
													]
												}
											},
											"response": []
										},
										{
											"name": "6. Start the authorisation process for a consent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ba363db8-6167-4c71-ac88-1a9b6698f65b",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Sca status is psuIdentified\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"updatePsuAuthentication link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"});",
															"",
															"pm.globals.set(\"authorisation_id\", jsonData.authorisationId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "37d86f23-047c-449b-95ef-a0ec2685ea88",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_none}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds",
														"{{piis_consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "7. Read the SCA status of the consent authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "848752dc-4961-4f81-bc82-092ab69382cb",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
											},
											"response": []
										},
										{
											"name": "8.  Get consent authorisation sub-resources request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e16705cf-1f33-4f3d-9a6f-29a40ef42729",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{consent_id}}/authorisations/",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds",
														"{{consent_id}}",
														"authorisations",
														""
													]
												},
												"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
											},
											"response": []
										},
										{
											"name": "9. Update PSU Data for consents",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4faed58e-f925-4129-9eeb-e021376cad81",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Explicit",
									"item": [
										{
											"name": "1. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0810267b-9f7d-4a01-b3ad-11869f5dd7f9",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Enable PIIS consent support in ASPSP profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "48281f31-6abb-4fe4-9b65-623adebc257f",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        }\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"TPP_CONSENT_SUPPORTED\",\n        \"redirectLinkToOnlineBanking\": {\n            \"piisRedirectUrlToAspsp\": \"http://localhost:4200/piis/{redirect-id}/{encrypted-consent-id}\"\n        }\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": true,\n        \"aspspNotificationsSupported\": [\n        ]\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Create PIIS consent in XS2A",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "67054a63-47d6-4afb-804f-a960569fec5b",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"PIIS consent ID exists\", () => {",
															"   pm.expect(jsonData).to.have.property('consentId');",
															"});",
															"",
															"pm.globals.set(\"piis_consent_id\", jsonData.consentId);",
															"",
															"pm.test(\"startAuthorisation link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    var startAuthorisation = _links.startAuthorisation.href;",
															"",
															"    if (startAuthorisation === undefined) {",
															"       pm.expect().fail();",
															"    }",
															"});",
															"",
															"pm.test(\"Consent status is received\", () => {",
															"    pm.expect(jsonData.consentStatus).to.eql('received');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "psu-id",
														"value": "{{psu_id_none}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban_none}}\",\n    \"currency\": \"EUR\"\n  },\n  \"cardNumber\": \"cardNumber\",\n  \"cardExpiryDate\": \"2030-10-10\",\n  \"cardInformation\": \"cardInformation\",\n  \"registrationInformation\": \"registrationInformation\"\n\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. Start the authorisation process for a consent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f2d652c9-81e3-4461-af70-057e3f52b7d2",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Sca status is psuIdentified\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"updatePsuAuthentication link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"});",
															"",
															"pm.globals.set(\"authorisation_id\", jsonData.authorisationId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f184771b-3d35-4d36-82d3-1ef4a8f01df0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_none}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v2/consents/confirmation-of-funds/{{piis_consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v2",
														"consents",
														"confirmation-of-funds",
														"{{piis_consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "059b4847-0bd4-4d8a-9bf3-ad7fe3b68914",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "82539e97-27fd-4c46-b541-dff4f53bb6de",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}